{"version":3,"sources":["./node_modules/@angular/common/fesm2015/http.js","./node_modules/ng2-ckeditor/fesm2015/ng2-ckeditor.js","./node_modules/ngx-pagination/dist/ngx-pagination.js","./src/app/pages/gameofthrone/books/books.component.html","./src/app/pages/gameofthrone/character/character.component.html","./src/app/pages/gameofthrone/houses/houses.component.html","./src/app/pages/gameofthrone/books/books.component.scss","./src/app/pages/gameofthrone/books/books.component.ts","./src/app/pages/gameofthrone/books/books.service.ts","./src/app/pages/gameofthrone/character/character.component.scss","./src/app/pages/gameofthrone/character/character.component.ts","./src/app/pages/gameofthrone/character/character.service.ts","./src/app/pages/gameofthrone/gameofthrone.module.ts","./src/app/pages/gameofthrone/houses/houses.component.scss","./src/app/pages/gameofthrone/houses/houses.component.ts","./src/app/pages/gameofthrone/houses/houses.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEoG;AAC9D;AACkB;AACM;;AAE9D;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAOV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAOV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,WAAW,EAOV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,mCAAmC,EAAE;AACrC;AACA,mCAAmC,EAAE;AACrC;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,8CAA8C,EAAE;AAChD,sDAAsD,EAAE;AACxD,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,8BAA8B,EAAE,kDAAkD,EAAE;AACpF;AACA;AACA,WAAW,EA0BV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAqBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA,wBAAwB,gCAAgC;AACxD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA,wBAAwB,kCAAkC;AAC1D;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,WAAW,EAOV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,WAAW,EAiBV;AACD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,sCAAsC,EAAE,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B,2CAA2C,EAAE;AAC7C,4BAA4B,EAAE;AAC9B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA,0BAA0B,oBAAoB,wBAAwB,EAAE;AACxE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA,uBAAuB,oBAAoB,wBAAwB,EAAE;AACrE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA,0BAA0B,oBAAoB,wBAAwB,EAAE;AACxE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,+BAA+B,EAAE,iBAAiB,EAAE;AACpD,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,iDAAiD,EAAE,MAAM,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,+BAA+B,EAAE,qCAAqC,EAAE,iBAAiB,EAAE,iBAAiB,EAAE;AAC9G,wBAAwB,EAAE;AAC1B,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,sEAAsE,EAAE;AACxE,8CAA8C,EAAE;AAChD,oCAAoC,EAAE;AACtC;AACA;AACA;AACA,uCAAuC,EAAE;AACzC,mDAAmD,EAAE;AACrD,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW,EAqBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EAWV;AACD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,4DAA4D,EAAE;AAC9D;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,iEAAiE,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6DAA6D,EAAE;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW,EAqDV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,WAAW,EAiBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,WAAW,EAUV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAiCV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW,EAQV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,4BAA4B;AAC1F;AACA;AACA;AACA,6CAA6C,4BAA4B,IAAI,YAAY,GAAG,gBAAgB;AAC5G;AACA;AACA;AACA;AACA,WAAW,EAYV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D,6DAA6D,4BAA4B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,kBAAkB,eAAe,GAAG,GAAG,EAAE;AACzC,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC;AACpC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,EAAE,MAAM,6BAA6B;AAC7F;AACA;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,+CAAE,WAAW,gEAAS;AAC9C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,EAAE,kBAAkB,6DAAM;AAC3D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0DAAG;AAC5C,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yCAAyC,0DAAG;AAC5C,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yCAAyC,0DAAG;AAC5C,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yCAAyC,0DAAG;AAC5C,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,iBAAiB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA,4BAA4B;AAC5B,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,yBAAyB;AACzB,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,0BAA0B;AAC1B,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAMV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EASV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,8BAA8B,4DAAc;AAC5C;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,6BAA6B,gBAAgB,EAAE;AACnE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,8EAA8E,SAAS;AACvF;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,6BAA6B;AAClC,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAMV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,4BAA4B;AAC5B;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB;AACA,aAAa,oBAAoB,EAAE,8BAA8B;AACjE;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EASV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,yDAAyD,mCAAmC;AAC5F;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB;AACxB;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE,MAAM,oBAAoB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,MAAM;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,EAMV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,6BAA6B,4DAAc;AAC3C,WAAW,EAAE;AACb,6BAA6B,4DAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EASV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,6BAA6B,yEAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,6BAA6B,OAAO,oDAAM,SAAS,yDAAW,IAAI,GAAG;AAC1E,KAAK,6BAA6B,OAAO,oDAAM,6BAA6B;AAC5E;AACA,WAAW,EA+BV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,+BAA+B;AACpC,KAAK,6BAA6B,OAAO,oDAAM,6BAA6B;AAC5E;AACA,WAAW,EAWV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,oBAAoB;AACzB,KAAK,OAAO,sDAAQ;AACpB;AACA,WAAW,EAgBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAA0D;AAC3E;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA;AACA;AACA,sCAAsC,0DAA0D;AAChG,sCAAsC,0DAA0D;AAChG;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,qBAAqB,4EAA4E;AACjG,qBAAqB,qEAAqE;AAC1F,qBAAqB,oDAAoD;AACzE,qBAAqB,sDAAsD;AAC3E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAA0D;AAC/E;AACA,qBAAqB,oDAAoD;AACzE;AACA,qBAAqB,+CAA+C;AACpE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,qBAAqB,kEAAkE;AACvF,qBAAqB,sEAAsE;AAC3F;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAE83B;AAC93B;;;;;;;;;;;;;ACp8FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACwG;AACxG;AACI;;AAEnD;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,IAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,oBAAoB,wDAAU;AAC9B,IAAI,+DAAS;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,qEAAe;AACnB,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,mBAAmB,wDAAU;AAC7B,IAAI,+DAAS;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC,gCAAgC,0DAAY;AAC5C,yBAAyB,0DAAY;AACrC,wBAAwB,0DAAY;AACpC,yBAAyB,0DAAY;AACrC,8BAA8B,0DAAY;AAC1C,qCAAqC,0DAAY;AACjD,sCAAsC,0DAAY;AAClD,yBAAyB,0DAAY;AACrC,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,oDAAM;AAClB;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,+DAAS,UAAU,gBAAgB;AACvC,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,qEAAe;AACnB,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,qEAAe;AACnB,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,0CAA0C,wDAAU;AACpD,IAAI,+DAAS;AACb;AACA;AACA;AACA,yBAAyB,gEAAiB;AAC1C,6BAA6B,gEAAU;AACvC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,oDAAM;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,8DAAQ;AACZ,kBAAkB,4DAAY;AAC9B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEoG;AACpG;;;;;;;;;;;;;AC9ZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiK;AAClH;;AAE/C;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,QAAQ,0DAAI;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,yvBAAyvB,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,mGAAmG,kBAAkB,KAAK,mBAAmB,6XAA6X,yBAAyB,kCAAkC,kEAAkE,6IAA6I,4BAA4B,kCAAkC,kEAAkE,wVAAwV,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AACv7E,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE,iCAAiC,kBAAkB,EAAE,wCAAwC,8CAA8C,4BAA4B,EAAE,uGAAuG,oBAAoB,EAAE,GAAG;;AAEn2D;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAM;AACd,oCAAoC,0DAAY;AAChD;AACA;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA,6BAA6B,qEAAuB;AACpD,2BAA2B,+DAAiB;AAC5C,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAM;AACd,oCAAoC,0DAAY;AAChD;AACA;AACA,QAAQ,+DAAS;AACjB;AACA;AACA,SAAS;AACT;AACA,YAAY,+DAAiB;AAC7B;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAQ;AAChB,sBAAsB,4DAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEwK;;;;;;;;;;;;;AChlBxK;AAAe,gFAAiB,iCAAiC,wCAAwC,ksDAAksD,kCAAkC,4EAA4E,UAAU,qBAAqB,WAAW,0EAA0E,WAAW,sEAAsE,cAAc,sEAAsE,gBAAgB,i+CAAi+C,oBAAoB,+/GAA+/G,iXAAiX,SAAS,01BAA01B,qXAAqX,kCAAkC,8DAA8D,UAAU,UAAU,WAAW,usCAAusC,uXAAuX,kCAAkC,+DAA+D,SAAS,mBAAmB,U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","file":"pages-gameofthrone-gameofthrone-module-es2015.js","sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the value or values.\n     * @param {?} value The new value or array of values.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (/** @type {?} */ (first));\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.decorators = [\n    { type: NgModule, args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n//# sourceMappingURL=http.js.map\n","import { __decorate, __metadata } from 'tslib';\nimport { EventEmitter, Output, Input, Directive, ContentChildren, QueryList, NgZone, ViewChild, Component, forwardRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * CKGroup component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\">\n *      <ckbutton [name]=\"'SaveButton'\" [command]=\"'saveCommand'\" (click)=\"save($event)\"\n *                [icon]=\"'/save.png'\" [toolbar]=\"'customGroup,1'\" [label]=\"'Save'\">\n *      </ckbutton>\n *   </ckeditor>\n */\nlet CKButtonDirective = class CKButtonDirective {\n    /**\n     * CKGroup component\n     * Usage :\n     *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\">\n     *      <ckbutton [name]=\"'SaveButton'\" [command]=\"'saveCommand'\" (click)=\"save($event)\"\n     *                [icon]=\"'/save.png'\" [toolbar]=\"'customGroup,1'\" [label]=\"'Save'\">\n     *      </ckbutton>\n     *   </ckeditor>\n     */\n    constructor() {\n        this.click = new EventEmitter();\n    }\n    initialize(editor) {\n        editor.instance.addCommand(this.command, {\n            exec: (evt) => {\n                this.click.emit(evt);\n            },\n        });\n        editor.instance.ui.addButton(this.name, {\n            label: this.label,\n            command: this.command,\n            toolbar: this.toolbar,\n            icon: this.icon,\n        });\n    }\n    ngOnInit() {\n        if (!this.name)\n            throw new Error('Attribute \"name\" is required on <ckbutton>');\n        if (!this.command)\n            throw new Error('Attribute \"command\" is required on <ckbutton>');\n    }\n};\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKButtonDirective.prototype, \"click\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKButtonDirective.prototype, \"label\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKButtonDirective.prototype, \"command\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKButtonDirective.prototype, \"toolbar\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKButtonDirective.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKButtonDirective.prototype, \"icon\", void 0);\nCKButtonDirective = __decorate([\n    Directive({\n        selector: 'ckbutton',\n    })\n], CKButtonDirective);\n\n/**\n * CKGroup component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\">\n *      <ckgroup [name]=\"'exampleGroup2'\" [previous]=\"'1'\" [subgroupOf]=\"'exampleGroup1'\">\n *          .\n *          .\n *      </ckgroup>\n *   </ckeditor>\n */\nlet CKGroupDirective = class CKGroupDirective {\n    ngAfterContentInit() {\n        // Reconfigure each button's toolbar property within ckgroup to hold its parent's name\n        this.toolbarButtons.forEach(button => (button.toolbar = this.name));\n    }\n    initialize(editor) {\n        editor.instance.ui.addToolbarGroup(this.name, this.previous, this.subgroupOf);\n        // Initialize each button within ckgroup\n        this.toolbarButtons.forEach(button => {\n            button.initialize(editor);\n        });\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKGroupDirective.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], CKGroupDirective.prototype, \"previous\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKGroupDirective.prototype, \"subgroupOf\", void 0);\n__decorate([\n    ContentChildren(CKButtonDirective),\n    __metadata(\"design:type\", QueryList)\n], CKGroupDirective.prototype, \"toolbarButtons\", void 0);\nCKGroupDirective = __decorate([\n    Directive({\n        selector: 'ckgroup',\n    })\n], CKGroupDirective);\n\nvar CKEditorComponent_1;\n/**\n * CKEditor component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\"></ckeditor>\n */\nlet CKEditorComponent = CKEditorComponent_1 = class CKEditorComponent {\n    /**\n     * Constructor\n     */\n    constructor(zone) {\n        this.zone = zone;\n        this.change = new EventEmitter();\n        this.editorChange = new EventEmitter();\n        this.ready = new EventEmitter();\n        this.blur = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.contentDom = new EventEmitter();\n        this.fileUploadRequest = new EventEmitter();\n        this.fileUploadResponse = new EventEmitter();\n        this.paste = new EventEmitter();\n        this.drop = new EventEmitter();\n        this._value = '';\n    }\n    get value() {\n        return this._value;\n    }\n    set value(v) {\n        if (v !== this._value) {\n            this._value = v;\n            this.onChange(v);\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.readonly && this.instance) {\n            this.instance.setReadOnly(changes.readonly.currentValue);\n        }\n    }\n    /**\n     * On component destroy\n     */\n    ngOnDestroy() {\n        if (this.instance) {\n            setTimeout(() => {\n                if (this.instance) {\n                    this.instance.removeAllListeners();\n                    CKEDITOR.instances[this.instance.name].destroy();\n                    this.instance.destroy();\n                    this.instance = null;\n                }\n            });\n        }\n    }\n    /**\n     * On component view init\n     */\n    ngAfterViewInit() {\n        this.ckeditorInit(this.config || {});\n    }\n    /**\n     * On component view checked\n     */\n    ngAfterViewChecked() {\n        this.ckeditorInit(this.config || {});\n    }\n    /**\n     * Value update process\n     */\n    updateValue(value) {\n        this.zone.run(() => {\n            this.value = value;\n            this.onChange(value);\n            this.onTouched();\n            this.change.emit(value);\n        });\n    }\n    /**\n     * CKEditor init\n     */\n    ckeditorInit(config) {\n        if (typeof CKEDITOR === 'undefined') {\n            console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');\n        }\n        else {\n            // Check textarea exists\n            if (this.instance || !this.documentContains(this.host.nativeElement)) {\n                return;\n            }\n            if (this.readonly) {\n                config.readOnly = this.readonly;\n            }\n            // CKEditor replace textarea\n            this.instance = CKEDITOR.replace(this.host.nativeElement, config);\n            // Set initial value\n            this.instance.setData(this.value);\n            // listen for instanceReady event\n            this.instance.on('instanceReady', (evt) => {\n                // if value has changed while instance loading\n                // update instance with current component value\n                if (this.instance.getData() !== this.value) {\n                    this.instance.setData(this.value);\n                }\n                // send the evt to the EventEmitter\n                this.ready.emit(evt);\n            });\n            // CKEditor change event\n            this.instance.on('change', (evt) => {\n                this.onTouched();\n                let value = this.instance.getData();\n                if (this.value !== value) {\n                    // Debounce update\n                    if (this.debounce) {\n                        if (this.debounceTimeout)\n                            clearTimeout(this.debounceTimeout);\n                        this.debounceTimeout = setTimeout(() => {\n                            this.updateValue(value);\n                            this.debounceTimeout = null;\n                        }, parseInt(this.debounce));\n                        // Live update\n                    }\n                    else {\n                        this.updateValue(value);\n                    }\n                }\n                // Original ckeditor event dispatch\n                this.editorChange.emit(evt);\n            });\n            // CKEditor blur event\n            this.instance.on('blur', (evt) => {\n                this.blur.emit(evt);\n            });\n            // CKEditor focus event\n            this.instance.on('focus', (evt) => {\n                this.focus.emit(evt);\n            });\n            // CKEditor contentDom event\n            this.instance.on('contentDom', (evt) => {\n                this.contentDom.emit(evt);\n            });\n            // CKEditor fileUploadRequest event\n            this.instance.on('fileUploadRequest', (evt) => {\n                this.fileUploadRequest.emit(evt);\n            });\n            // CKEditor fileUploadResponse event\n            this.instance.on('fileUploadResponse', (evt) => {\n                this.fileUploadResponse.emit(evt);\n            });\n            // CKEditor paste event\n            this.instance.on('paste', (evt) => {\n                this.paste.emit(evt);\n            });\n            // CKEditor drop event\n            this.instance.on('drop', (evt) => {\n                this.drop.emit(evt);\n            });\n            // Add Toolbar Groups to Editor. This will also add Buttons within groups.\n            this.toolbarGroups.forEach(group => {\n                group.initialize(this);\n            });\n            // Add Toolbar Buttons to Editor.\n            this.toolbarButtons.forEach(button => {\n                button.initialize(this);\n            });\n        }\n    }\n    /**\n     * Implements ControlValueAccessor\n     */\n    writeValue(value) {\n        this._value = value;\n        if (this.instance)\n            this.instance.setData(value);\n    }\n    onChange(_) { }\n    onTouched() { }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    documentContains(node) {\n        return document.contains ? document.contains(node) : document.body.contains(node);\n    }\n};\nCKEditorComponent.ctorParameters = () => [\n    { type: NgZone }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"config\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], CKEditorComponent.prototype, \"readonly\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], CKEditorComponent.prototype, \"debounce\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"change\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"editorChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"ready\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"blur\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"focus\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"contentDom\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"fileUploadRequest\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"fileUploadResponse\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"paste\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"drop\", void 0);\n__decorate([\n    ViewChild('host', { static: false }),\n    __metadata(\"design:type\", Object)\n], CKEditorComponent.prototype, \"host\", void 0);\n__decorate([\n    ContentChildren(CKButtonDirective),\n    __metadata(\"design:type\", QueryList)\n], CKEditorComponent.prototype, \"toolbarButtons\", void 0);\n__decorate([\n    ContentChildren(CKGroupDirective),\n    __metadata(\"design:type\", QueryList)\n], CKEditorComponent.prototype, \"toolbarGroups\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], CKEditorComponent.prototype, \"value\", null);\nCKEditorComponent = CKEditorComponent_1 = __decorate([\n    Component({\n        selector: 'ckeditor',\n        providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => CKEditorComponent_1),\n                multi: true,\n            },\n        ],\n        template: `\n    <textarea #host></textarea>\n  `\n    }),\n    __metadata(\"design:paramtypes\", [NgZone])\n], CKEditorComponent);\n\n/**\n * CKEditorModule\n */\nlet CKEditorModule = class CKEditorModule {\n};\nCKEditorModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        declarations: [CKEditorComponent, CKButtonDirective, CKGroupDirective],\n        exports: [CKEditorComponent, CKButtonDirective, CKGroupDirective],\n    })\n], CKEditorModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorModule, CKEditorComponent as ɵa, CKButtonDirective as ɵb, CKGroupDirective as ɵc };\n//# sourceMappingURL=ng2-ckeditor.js.map\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = /** @class */ (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        }\r\n        else {\r\n            var changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = /** @class */ (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe = __decorate$1([\r\n        Pipe({\r\n            name: 'paginate',\r\n            pure: false\r\n        }),\r\n        __metadata(\"design:paramtypes\", [PaginationService])\r\n    ], PaginatePipe);\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = /** @class */ (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\r\n        get: function () {\r\n            return this._responsive;\r\n        },\r\n        set: function (value) {\r\n            this._responsive = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"id\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Number)\r\n    ], PaginationControlsComponent.prototype, \"maxSize\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"directionLinks\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"autoHide\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"responsive\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"previousLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"nextLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPaginationLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPageLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderCurrentLabel\", void 0);\r\n    __decorate$2([\r\n        Output(),\r\n        __metadata$1(\"design:type\", EventEmitter)\r\n    ], PaginationControlsComponent.prototype, \"pageChange\", void 0);\r\n    PaginationControlsComponent = __decorate$2([\r\n        Component({\r\n            selector: 'pagination-controls',\r\n            template: DEFAULT_TEMPLATE,\r\n            styles: [DEFAULT_STYLES],\r\n            changeDetection: ChangeDetectionStrategy.OnPush,\r\n            encapsulation: ViewEncapsulation.None\r\n        })\r\n    ], PaginationControlsComponent);\r\n    return PaginationControlsComponent;\r\n}());\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = /** @class */ (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.getTotalItems = function () {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.setCurrent(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", String)\r\n    ], PaginationControlsDirective.prototype, \"id\", void 0);\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", Number)\r\n    ], PaginationControlsDirective.prototype, \"maxSize\", void 0);\r\n    __decorate$3([\r\n        Output(),\r\n        __metadata$2(\"design:type\", EventEmitter)\r\n    ], PaginationControlsDirective.prototype, \"pageChange\", void 0);\r\n    PaginationControlsDirective = __decorate$3([\r\n        Directive({\r\n            selector: 'pagination-template,[pagination-template]',\r\n            exportAs: 'paginationApi'\r\n        }),\r\n        __metadata$2(\"design:paramtypes\", [PaginationService,\r\n            ChangeDetectorRef])\r\n    ], PaginationControlsDirective);\r\n    return PaginationControlsDirective;\r\n}());\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar NgxPaginationModule = /** @class */ (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule = __decorate([\r\n        NgModule({\r\n            imports: [CommonModule],\r\n            declarations: [\r\n                PaginatePipe,\r\n                PaginationControlsComponent,\r\n                PaginationControlsDirective\r\n            ],\r\n            providers: [PaginationService],\r\n            exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n        })\r\n    ], NgxPaginationModule);\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n","export default \"<style>a:hover {\\n    text-decoration: underline; // changed from text:decoration:none\\n}</style>\\n\\n<div class=\\\"row mb-1\\\" *ngIf=\\\"showList\\\">\\n    <div class=\\\"col\\\">\\n        <div class=\\\"input-group mb-3 box-shadow\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text border-top-0 border-left-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-search\\\"></i></span>\\n            </div>\\n            <input type=\\\"text\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Search client by ID Number...\\\"\\n                   class=\\\"form-control border-0\\\">\\n            <div class=\\\"input-group-append\\\">\\n                <span (click)=\\\"toggleShow()\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-user-plus\\\"></i></span>\\n                <span (click)=\\\"toggle('grid')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-th\\\"></i></span>\\n                <span (click)=\\\"toggle('list')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-list\\\"></i></span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div *ngIf=\\\"type=='list' || showList\\\" class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"table-responsive bg-white box-shadow\\\">\\n            <table class=\\\"table table-hover\\\">\\n                <thead>\\n                <tr>\\n                    <th>Aliasis</th>\\n                    <th>Name</th>\\n                    <th>Gender</th>\\n                    <th>Culture</th>\\n\\n                </tr>\\n                </thead>\\n                <tbody>\\n                <tr *ngFor=\\\"let book of books  | ClientSearchPipe : searchText | paginate: { itemsPerPage: 6, currentPage: p }\\\">\\n                    <td class=\\\"align-middle text-truncate\\\"><a href={{book.url}} target=\\\"_blank\\\">{{book.name}}</a></td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{book.isbn}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{book.country}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{book.mediaType}}</td>\\n\\n                    <td class=\\\"align-middle\\\">\\n                        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n                            <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"editBooks(book)\\\"><i\\n                                    class=\\\"fa fa-eye\\\"></i> View</button>\\n                        </div>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"showList\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"bg-white text-center\\\">\\n            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"showDetails\\\">\\n    <div class=\\\"col-lg-12 mb-4\\\">\\n        <div widget class=\\\"card border-0 box-shadow\\\">\\n            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                <h5 class=\\\"mb-0\\\">Book Details</h5>\\n                <div class=\\\"widget-controls\\\">\\n                    <a data-widgster=\\\"expand\\\" href=\\\"#\\\" class=\\\"transition\\\"><i class=\\\"fa fa-chevron-down\\\"></i></a>\\n                    <a data-widgster=\\\"collapse\\\" href=\\\"#\\\" class=\\\"transition\\\"><i class=\\\"fa fa-chevron-up\\\"></i></a>\\n                </div>\\n            </div>\\n            <div class=\\\"card-body pt-0 widget-body\\\">\\n                <form [formGroup]=\\\"bookForm\\\" >\\n                    <div style=\\\"border: 0.5px solid #c2c2c2; border-radius: 5px; padding: 5px\\\">\\n                        <div class=\\\"row\\\">\\n\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Name</label>\\n                                    <input formControlName=\\\"name\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">ISBN</label>\\n                                    <input formControlName=\\\"isbn\\\" class=\\\"form-control\\\" type=\\\"text\\\" >\\n                                </div>\\n                            </div>\\n\\n                                <div class=\\\"col-sm-4\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Country</label>\\n                                        <input formControlName=\\\"country\\\" class=\\\"form-control\\\" type=\\\"text\\\"  >\\n                                    </div>\\n                                </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Number Of Pages</label>\\n                                    <input formControlName=\\\"numberOfPages\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Publisher</label>\\n                                    <input formControlName=\\\"publisher\\\" class=\\\"form-control\\\" type=\\\"text\\\" >\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Released</label>\\n                                    <input formControlName=\\\"released\\\" class=\\\"form-control\\\" type=\\\"text\\\"  >\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Media Type</label>\\n                                    <input formControlName=\\\"mediaType\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" style=\\\"margin-top: 6px\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Authors</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <div class=\\\"table-responsive bg-white box-shadow\\\">\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Desc</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr>\\n                                        <td>{{authors}}</td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"authors ===null\\\" ><td>No Records Found</td></tr>\\n                                    </tbody>\\n                                </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Characters</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Description</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngFor=\\\"let char of characters | paginate: { itemsPerPage: 6, currentPage: p }\\\">\\n                                        <td ><a href=\\\"{{char.url}}\\\">Book-{{char.name}}</a></td>\\n                                    </tr>\\n                                    </tbody>\\n                                </table>\\n                                <div class=\\\"row\\\" *ngIf=\\\"showDetails\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <div class=\\\"bg-white text-center\\\">\\n                                            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" >\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">POVCharacters</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Description</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngFor=\\\"let pov of povCharacters | paginate: { itemsPerPage: 6, currentPage: p } \\\">\\n                                        <td ><a href=\\\"{{pov.url}}\\\">Pov Character-{{pov.name}}</a></td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"povCharacters.length === 0\\\"><td>No Records Found</td></tr>\\n                                    </tbody>\\n                                </table>\\n                                <div class=\\\"row\\\" *ngIf=\\\"showDetails\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <div class=\\\"bg-white text-center\\\">\\n                                            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row justify-content-center\\\">\\n\\n                        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelBooks()\\\">Cancel</button>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","export default \"<style>a:hover {\\n    text-decoration: underline; // changed from text:decoration:none\\n}</style>\\n\\n<div class=\\\"row mb-1\\\" *ngIf=\\\"showList\\\">\\n    <div class=\\\"col\\\">\\n        <div class=\\\"input-group mb-3 box-shadow\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text border-top-0 border-left-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-search\\\"></i></span>\\n            </div>\\n            <input type=\\\"text\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Search client by ID Number...\\\"\\n                   class=\\\"form-control border-0\\\">\\n            <div class=\\\"input-group-append\\\">\\n                <span (click)=\\\"toggleShow()\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-user-plus\\\"></i></span>\\n                <span (click)=\\\"toggle('grid')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-th\\\"></i></span>\\n                <span (click)=\\\"toggle('list')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-list\\\"></i></span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div *ngIf=\\\"type=='list' || showList\\\" class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"table-responsive bg-white box-shadow\\\">\\n            <table class=\\\"table table-hover\\\">\\n                <thead>\\n                <tr>\\n                    <th>Aliasis</th>\\n                    <th>Name</th>\\n                    <th>Gender</th>\\n                    <th>Culture</th>\\n\\n                </tr>\\n                </thead>\\n                <tbody>\\n                <tr *ngFor=\\\"let character of characters  | ClientSearchPipe : searchText | paginate: { itemsPerPage: 6, currentPage: p }\\\">\\n                    <td class=\\\"align-middle text-truncate\\\"><a href={{character.url}} target=\\\"_blank\\\">{{character.aliases}}</a></td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{character.name}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{character.gender}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{character.culture}}</td>\\n\\n                    <td class=\\\"align-middle\\\">\\n                        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n                            <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"openModal(modalContent,character)\\\"><i\\n                                    class=\\\"fa fa-eye\\\"></i> View</button>\\n                        </div>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"showList\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"bg-white text-center\\\">\\n            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #modalContent>\\n    <div class=\\\"modal-body bg-gray\\\">\\n<div class=\\\"row\\\" >\\n    <div class=\\\"col-lg-12 mb-4\\\">\\n        <div widget class=\\\"card border-0 box-shadow\\\">\\n            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                <h5 class=\\\"mb-0\\\">Character Details</h5>\\n                <div class=\\\"widget-controls\\\">\\n                    <a data-widgster=\\\"expand\\\" href=\\\"#\\\" class=\\\"transition\\\"><i class=\\\"fa fa-chevron-down\\\"></i></a>\\n                    <a data-widgster=\\\"collapse\\\" href=\\\"#\\\" class=\\\"transition\\\"><i class=\\\"fa fa-chevron-up\\\"></i></a>\\n                </div>\\n            </div>\\n            <div class=\\\"card-body pt-0 widget-body\\\">\\n                <form [formGroup]=\\\"personalForm\\\" >\\n                    <div style=\\\"border: 0.5px solid #c2c2c2; border-radius: 5px; padding: 5px\\\">\\n                        <div class=\\\"row\\\">\\n\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Aliases</label>\\n                                    <input formControlName=\\\"aliases\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Name</label>\\n                                    <input formControlName=\\\"name\\\" class=\\\"form-control\\\" type=\\\"text\\\" >\\n                                </div>\\n                            </div>\\n\\n                                <div class=\\\"col-sm-3\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Gender</label>\\n                                        <input formControlName=\\\"gender\\\" class=\\\"form-control\\\" type=\\\"text\\\"  >\\n                                    </div>\\n                                </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Culture</label>\\n                                    <input formControlName=\\\"culture\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Born</label>\\n                                    <input formControlName=\\\"born\\\" class=\\\"form-control\\\" type=\\\"text\\\" >\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Died</label>\\n                                    <input formControlName=\\\"died\\\" class=\\\"form-control\\\" type=\\\"text\\\"  >\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Father</label>\\n                                    <input formControlName=\\\"father\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Mother</label>\\n                                    <input formControlName=\\\"mother\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-3\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Spouse</label>\\n                                    <input formControlName=\\\"spouse\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Titles</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Desc</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n\\n                                    <tr>\\n                                        <td >{{titles}}</td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"titles ===null\\\" ><td>No Records Found</td></tr>\\n\\n                                    </tbody>\\n                                </table>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Books</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Book Number</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngFor=\\\"let book of books  ; let id = index\\\">\\n                                        <td ><a href=\\\"{{book.url}}\\\">Book-{{book.name}}</a></td>\\n                                    </tr>\\n                                    </tbody>\\n                                </table>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" >\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">POVBooks</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Book Number</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngFor=\\\"let book of povbooks  ; let id = index\\\">\\n                                        <td>{{book}}</td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"povbooks.length === 0\\\"><td>No Records Found</td></tr>\\n                                    </tbody>\\n                                </table>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" >\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">TV Series</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Name</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngFor=\\\"let tvser of tvSeries  ; let id = index\\\">\\n                                        <td>{{tvser}}</td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"tvSeries.length === 0\\\"><td>No Records Found</td></tr>\\n                                    </tbody>\\n                                </table>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" >\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Played By</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Name</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngIf=\\\"playedBy === null\\\"><td>No Records Found</td></tr>\\n                                    <tr *ngIf=\\\"playedBy != null\\\">\\n                                        <td >{{playedBy}}</td>\\n                                    </tr>\\n\\n                                    </tbody>\\n                                </table>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row justify-content-center\\\">\\n\\n                        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelCharacter()\\\">Cancel</button>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n</div>\\n    </div>\\n</ng-template>\"","export default \"<style>a:hover {\\n    text-decoration: underline; // changed from text:decoration:none\\n}</style>\\n\\n<div class=\\\"row mb-1\\\" *ngIf=\\\"showList\\\">\\n    <div class=\\\"col\\\">\\n        <div class=\\\"input-group mb-3 box-shadow\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text border-top-0 border-left-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-search\\\"></i></span>\\n            </div>\\n            <input type=\\\"text\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Search client by ID Number...\\\"\\n                   class=\\\"form-control border-0\\\">\\n            <div class=\\\"input-group-append\\\">\\n                <span (click)=\\\"toggleShow()\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-user-plus\\\"></i></span>\\n                <span (click)=\\\"toggle('grid')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-th\\\"></i></span>\\n                <span (click)=\\\"toggle('list')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i\\n                        class=\\\"fa fa-list\\\"></i></span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div *ngIf=\\\"type=='list' || showList\\\" class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"table-responsive bg-white box-shadow\\\">\\n            <table class=\\\"table table-hover\\\">\\n                <thead>\\n                <tr>\\n                    <th>Name</th>\\n                    <th>Region</th>\\n                    <th>Coat Of Arms</th>\\n                    <th>Words</th>\\n\\n\\n                </tr>\\n                </thead>\\n                <tbody>\\n                <tr *ngFor=\\\"let house of houses  | ClientSearchPipe : searchText | paginate: { itemsPerPage: 6, currentPage: p }\\\">\\n                    <td class=\\\"align-middle text-truncate\\\"><a href={{house.url}} target=\\\"_blank\\\">{{house.name}}</a></td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{house.region}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{house.coatOfArms}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{house.words}}</td>\\n                    <td class=\\\"align-middle\\\">\\n                        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n                            <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"editHouse(house)\\\"><i\\n                                    class=\\\"fa fa-eye\\\"></i> View</button>\\n                        </div>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"showList\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"bg-white text-center\\\">\\n            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"showDetails\\\">\\n    <div class=\\\"col-lg-12 mb-4\\\">\\n        <div widget class=\\\"card border-0 box-shadow\\\">\\n            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                <h5 class=\\\"mb-0\\\">House Details</h5>\\n                <div class=\\\"widget-controls\\\">\\n                    <a data-widgster=\\\"expand\\\" href=\\\"#\\\" class=\\\"transition\\\"><i class=\\\"fa fa-chevron-down\\\"></i></a>\\n                    <a data-widgster=\\\"collapse\\\" href=\\\"#\\\" class=\\\"transition\\\"><i class=\\\"fa fa-chevron-up\\\"></i></a>\\n                </div>\\n            </div>\\n            <div class=\\\"card-body pt-0 widget-body\\\">\\n                <form [formGroup]=\\\"houseForm\\\" >\\n                    <div style=\\\"border: 0.5px solid #c2c2c2; border-radius: 5px; padding: 5px\\\">\\n                        <div class=\\\"row\\\">\\n\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Name</label>\\n                                    <input formControlName=\\\"name\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Region</label>\\n                                    <input formControlName=\\\"isbn\\\" class=\\\"form-control\\\" type=\\\"text\\\" >\\n                                </div>\\n                            </div>\\n\\n                                <div class=\\\"col-sm-4\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Coat Of Arms</label>\\n                                        <input formControlName=\\\"country\\\" class=\\\"form-control\\\" type=\\\"text\\\"  >\\n                                    </div>\\n                                </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Words</label>\\n                                    <input formControlName=\\\"numberOfPages\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Current Lord</label>\\n                                    <input formControlName=\\\"publisher\\\" class=\\\"form-control\\\" type=\\\"text\\\" >\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Heir</label>\\n                                    <input formControlName=\\\"released\\\" class=\\\"form-control\\\" type=\\\"text\\\"  >\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Over Lord</label>\\n                                    <input formControlName=\\\"mediaType\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Founded</label>\\n                                    <input formControlName=\\\"mediaType\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-sm-4\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-gray\\\">Founder</label>\\n                                    <input formControlName=\\\"mediaType\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                    <div class=\\\"col-sm-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"text-gray\\\">Died Out</label>\\n                            <input formControlName=\\\"mediaType\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                        </div>\\n                    </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" style=\\\"margin-top: 6px\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Titles</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <div class=\\\"table-responsive bg-white box-shadow\\\">\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Desc</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr>\\n                                        <td>{{titles}}</td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"titles ===null\\\" ><td>No Records Found</td></tr>\\n                                    </tbody>\\n                                </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" style=\\\"margin-top: 6px\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Seats</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <div class=\\\"table-responsive bg-white box-shadow\\\">\\n                                    <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                        <thead>\\n                                        <tr>\\n                                            <th>Desc</th>\\n                                        </tr>\\n                                        </thead>\\n                                        <tbody>\\n                                        <tr>\\n                                            <td>{{seats}}</td>\\n                                        </tr>\\n                                        <tr *ngIf=\\\"seats ===null\\\" ><td>No Records Found</td></tr>\\n                                        </tbody>\\n                                    </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" style=\\\"margin-top: 6px\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">Ancestral Weapons</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <div class=\\\"table-responsive bg-white box-shadow\\\">\\n                                    <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                        <thead>\\n                                        <tr>\\n                                            <th>Desc</th>\\n                                        </tr>\\n                                        </thead>\\n                                        <tbody>\\n                                        <tr>\\n                                            <td>{{ancestralWeapons}}</td>\\n                                        </tr>\\n                                        <tr *ngIf=\\\"ancestralWeapons ===null\\\" ><td>No Records Found</td></tr>\\n                                        </tbody>\\n                                    </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\">\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\"></h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Description</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngFor=\\\"let cadet of cadetBranches | paginate: { itemsPerPage: 6, currentPage: p }\\\">\\n                                        <td ><a href=\\\"{{cadet.url}}\\\">Cadet Branch House-{{cadet.name}}</a></td>\\n                                    </tr>\\n                                    </tbody>\\n                                </table>\\n                                <div class=\\\"row\\\" *ngIf=\\\"showDetails\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <div class=\\\"bg-white text-center\\\">\\n                                            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-12 mb-4\\\" >\\n                        <div widget class=\\\"card border-0 box-shadow\\\">\\n                            <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                                <h5 class=\\\"mb-0\\\">POVCharacters</h5>\\n                            </div>\\n                            <div class=\\\"card-body pt-0 widget-body\\\">\\n\\n                                <table class=\\\"table table-bordered\\\" style=\\\"margin-top: 10px;\\\">\\n                                    <thead>\\n                                    <tr>\\n                                        <th>Description</th>\\n                                    </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                    <tr *ngFor=\\\"let member of swornMembers  | paginate: { itemsPerPage: 6, currentPage: p}\\\">\\n                                        <td ><a href=\\\"{{member.url}}\\\">Sworn Member Character-{{member.name}}</a></td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"swornMembers.length === 0\\\"><td>No Records Found</td></tr>\\n                                    </tbody>\\n                                </table>\\n                                <div class=\\\"row\\\" *ngIf=\\\"showDetails\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <div class=\\\"bg-white text-center\\\">\\n                                            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row justify-content-center\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelHouses()\\\">Cancel</button>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","export default \".step .step-content {\\n  background: #b9b9b9;\\n  height: 40px;\\n  font-size: 1.5rem;\\n}\\n.step .step-content .step-name {\\n  font-size: 14px;\\n}\\n.step .step-content.confirmed {\\n  background-color: #4BAE4F !important;\\n}\\n.confirmed-content .fa-check {\\n  font-size: 120px;\\n}\\n.confirmed-content .fa-print {\\n  font-size: 24px;\\n}\\n@media print {\\n  body * {\\n    visibility: hidden;\\n  }\\n\\n  #section-to-print, #section-to-print * {\\n    visibility: visible;\\n  }\\n\\n  #section-to-print {\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2Jvb2tzL0E6XFxpJm1fY29kZV90ZXN0XFxjb2RlX3Rlc3Qvc3JjXFxhcHBcXHBhZ2VzXFxnYW1lb2Z0aHJvbmVcXGJvb2tzXFxib29rcy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2Jvb2tzL2Jvb2tzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksbUJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7QUNBUjtBRENRO0VBQ0ksZUFBQTtBQ0NaO0FEQ1E7RUFDSSxvQ0FBQTtBQ0NaO0FES0k7RUFDSSxnQkFBQTtBQ0ZSO0FESUk7RUFDSSxlQUFBO0FDRlI7QURLQTtFQUNJO0lBQ0ksa0JBQUE7RUNGTjs7RURLRTtJQUNJLG1CQUFBO0VDRk47O0VES0U7SUFDSSxrQkFBQTtJQUNBLE9BQUE7SUFDQSxNQUFBO0VDRk47QUFDRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2dhbWVvZnRocm9uZS9ib29rcy9ib29rcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zdGVwe1xuICAgIC5zdGVwLWNvbnRlbnR7XG4gICAgICAgIGJhY2tncm91bmQ6ICNiOWI5Yjk7XG4gICAgICAgIGhlaWdodDogNDBweDtcbiAgICAgICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgICAgIC5zdGVwLW5hbWV7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIH1cbiAgICAgICAgJi5jb25maXJtZWR7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNEJBRTRGICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi5jb25maXJtZWQtY29udGVudHtcbiAgICAuZmEtY2hlY2t7XG4gICAgICAgIGZvbnQtc2l6ZTogMTIwcHg7XG4gICAgfVxuICAgIC5mYS1wcmludHtcbiAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgIH1cbn1cbkBtZWRpYSBwcmludCB7XG4gICAgYm9keSAqIHtcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgICAvL3RyYW5zZm9ybTogc2NhbGUoLjcpO1xuICAgIH1cbiAgICAjc2VjdGlvbi10by1wcmludCwgI3NlY3Rpb24tdG8tcHJpbnQgKiB7XG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG5cbiAgICB9XG4gICAgI3NlY3Rpb24tdG8tcHJpbnQge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICB9XG4gICAgLy90YWJsZSB7cGFnZS1icmVhay1pbnNpZGU6IGF2b2lkO31cbn1cblxuIiwiLnN0ZXAgLnN0ZXAtY29udGVudCB7XG4gIGJhY2tncm91bmQ6ICNiOWI5Yjk7XG4gIGhlaWdodDogNDBweDtcbiAgZm9udC1zaXplOiAxLjVyZW07XG59XG4uc3RlcCAuc3RlcC1jb250ZW50IC5zdGVwLW5hbWUge1xuICBmb250LXNpemU6IDE0cHg7XG59XG4uc3RlcCAuc3RlcC1jb250ZW50LmNvbmZpcm1lZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0QkFFNEYgIWltcG9ydGFudDtcbn1cblxuLmNvbmZpcm1lZC1jb250ZW50IC5mYS1jaGVjayB7XG4gIGZvbnQtc2l6ZTogMTIwcHg7XG59XG4uY29uZmlybWVkLWNvbnRlbnQgLmZhLXByaW50IHtcbiAgZm9udC1zaXplOiAyNHB4O1xufVxuXG5AbWVkaWEgcHJpbnQge1xuICBib2R5ICoge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuXG4gICNzZWN0aW9uLXRvLXByaW50LCAjc2VjdGlvbi10by1wcmludCAqIHtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICB9XG5cbiAgI3NlY3Rpb24tdG8tcHJpbnQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgfVxufSJdfQ== */\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {NgbDateStruct} from '@ng-bootstrap/ng-bootstrap';\nimport {NgbModal, NgbModalRef} from '@ng-bootstrap/ng-bootstrap';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {BooksService} from './books.service';\n\nimport {Books} from './books.model';\nimport {Router} from '@angular/router';\n\n\n\n\n@Component({\n    selector: 'app-books',\n    templateUrl: './books.component.html',\n    styleUrls: ['./books.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [BooksService]\n})\nexport class BooksComponent  implements OnInit {\n\n    public books: Books[];\n    public book: Books;\n    public bookForm: FormGroup;\n    showDetails: Boolean = false; // hidden by default\n    showList: Boolean = true;\n    selected = [];\n    private characters = [];\n    private povCharacters = [];\n    public p: any;\n    public modalRef: NgbModalRef;\n    private authors: any = [];\n\n\n    constructor(private formBuilder: FormBuilder,  public modalService: NgbModal,\n                private booksService: BooksService,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n\n        this.getBooks();\n\n        this.bookForm = this.formBuilder.group({\n            'name': [''],\n            'isbn': [''],\n            'numberOfPages': [''],\n            'publisher': [''],\n            'country': [''],\n            'mediaType': null,\n            'released': null\n        });\n    }\n    public cancelInvoice() {\n        this.showList = true;\n        this.characters = [];\n    }\n\n\n    public getBooks(): void {\n        this.booksService.getBooks().subscribe(books =>\n            this.books = books\n        );\n    }\n\n    public editBooks(book: Books) {\n\n        this.showList = false;\n        this.showDetails = true;\n        this.bookForm.controls['name'].setValue(book.name === '' ? 'NA' : book.name);\n        if (book.authors.length > 0 ) {\n            this.authors.push(book.authors);\n        }\n\n        for (const povCharObj of book.povCharacters) {\n            // character.books[i].split('books/', 2)[1]\n            this.characters.push({'name': povCharObj.split('characters/', 2)[1], 'url': povCharObj});\n        }\n        for (const charObj of book.characters) {\n            // character.books[i].split('books/', 2)[1]\n            this.characters.push({'name': charObj.split('characters/', 2)[1], 'url': charObj});\n        }\n\n\n        // this.router.navigate([]).then(result => {  window.open('/gameofthrone/character', '_blank'); });\n    }\n\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {environment} from '../../../../environments/environment';\nimport {Books} from './books.model';\n@Injectable()\nexport class BooksService {\n\n    constructor(public http: HttpClient) { }\n\n    getBooks(): Observable<Books[]> {\n        return this.http.get<Books[]>(environment.BASE_URL + 'books');\n    }\n}\n","export default \".step .step-content {\\n  background: #b9b9b9;\\n  height: 40px;\\n  font-size: 1.5rem;\\n}\\n.step .step-content .step-name {\\n  font-size: 14px;\\n}\\n.step .step-content.confirmed {\\n  background-color: #4BAE4F !important;\\n}\\n.confirmed-content .fa-check {\\n  font-size: 120px;\\n}\\n.confirmed-content .fa-print {\\n  font-size: 24px;\\n}\\n@media print {\\n  body * {\\n    visibility: hidden;\\n  }\\n\\n  #section-to-print, #section-to-print * {\\n    visibility: visible;\\n  }\\n\\n  #section-to-print {\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2NoYXJhY3Rlci9BOlxcaSZtX2NvZGVfdGVzdFxcY29kZV90ZXN0L3NyY1xcYXBwXFxwYWdlc1xcZ2FtZW9mdGhyb25lXFxjaGFyYWN0ZXJcXGNoYXJhY3Rlci5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2NoYXJhY3Rlci9jaGFyYWN0ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDSSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtBQ0FSO0FEQ1E7RUFDSSxlQUFBO0FDQ1o7QURDUTtFQUNJLG9DQUFBO0FDQ1o7QURLSTtFQUNJLGdCQUFBO0FDRlI7QURJSTtFQUNJLGVBQUE7QUNGUjtBREtBO0VBQ0k7SUFDSSxrQkFBQTtFQ0ZOOztFREtFO0lBQ0ksbUJBQUE7RUNGTjs7RURLRTtJQUNJLGtCQUFBO0lBQ0EsT0FBQTtJQUNBLE1BQUE7RUNGTjtBQUNGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2NoYXJhY3Rlci9jaGFyYWN0ZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3RlcHtcbiAgICAuc3RlcC1jb250ZW50e1xuICAgICAgICBiYWNrZ3JvdW5kOiAjYjliOWI5O1xuICAgICAgICBoZWlnaHQ6IDQwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgICAgICAuc3RlcC1uYW1le1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICB9XG4gICAgICAgICYuY29uZmlybWVke1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRCQUU0RiAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uY29uZmlybWVkLWNvbnRlbnR7XG4gICAgLmZhLWNoZWNre1xuICAgICAgICBmb250LXNpemU6IDEyMHB4O1xuICAgIH1cbiAgICAuZmEtcHJpbnR7XG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICB9XG59XG5AbWVkaWEgcHJpbnQge1xuICAgIGJvZHkgKiB7XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgLy90cmFuc2Zvcm06IHNjYWxlKC43KTtcbiAgICB9XG4gICAgI3NlY3Rpb24tdG8tcHJpbnQsICNzZWN0aW9uLXRvLXByaW50ICoge1xuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuXG4gICAgfVxuICAgICNzZWN0aW9uLXRvLXByaW50IHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB0b3A6IDA7XG4gICAgfVxuICAgIC8vdGFibGUge3BhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDt9XG59XG5cbiIsIi5zdGVwIC5zdGVwLWNvbnRlbnQge1xuICBiYWNrZ3JvdW5kOiAjYjliOWI5O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xufVxuLnN0ZXAgLnN0ZXAtY29udGVudCAuc3RlcC1uYW1lIHtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLnN0ZXAgLnN0ZXAtY29udGVudC5jb25maXJtZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNEJBRTRGICFpbXBvcnRhbnQ7XG59XG5cbi5jb25maXJtZWQtY29udGVudCAuZmEtY2hlY2sge1xuICBmb250LXNpemU6IDEyMHB4O1xufVxuLmNvbmZpcm1lZC1jb250ZW50IC5mYS1wcmludCB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbn1cblxuQG1lZGlhIHByaW50IHtcbiAgYm9keSAqIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICAjc2VjdGlvbi10by1wcmludCwgI3NlY3Rpb24tdG8tcHJpbnQgKiB7XG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgfVxuXG4gICNzZWN0aW9uLXRvLXByaW50IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gIH1cbn0iXX0= */\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {NgbDateStruct} from '@ng-bootstrap/ng-bootstrap';\nimport {NgbModal, NgbModalRef} from '@ng-bootstrap/ng-bootstrap';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {CharacterService} from './character.service';\n\nimport {Character} from './character.model';\nimport {Router} from '@angular/router';\n\n\n\n\n@Component({\n    selector: 'app-character',\n    templateUrl: './character.component.html',\n    styleUrls: ['./character.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [CharacterService]\n})\nexport class CharacterComponent  implements OnInit {\n\n    public characters: Character[];\n    public character: Character;\n    public personalForm: FormGroup;\n    public details: any = {};\n    showDetails: Boolean = true; // hidden by default\n    showList: Boolean = true;\n    selected = [];\n    private books = [];\n    private povbooks = [];\n    private allegiances = [];\n    private tvSeries = [];\n    private playedBy: String;\n    private titles: String;\n    public p: any;\n    public modalRef: NgbModalRef;\n\n\n    constructor(private formBuilder: FormBuilder,  public modalService: NgbModal,\n                private characterService: CharacterService,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n\n        this.getCharacters();\n\n        this.personalForm = this.formBuilder.group({\n\n            'name': [''],\n            'aliases': [''],\n            'gender': [''],\n            'father': [''],\n            'mother': [''],\n            'spouse': [''],\n            'born': null,\n            'died': null,\n            'culture': null\n        });\n    }\n    public cancelCharacter() {\n        this.showList = true;\n        this.showDetails = true;\n    }\n\n\n    public getCharacters(): void {\n        this.characterService.getCharacters().subscribe(characters =>\n            this.characters = characters\n        );\n    }\n\n    public editMember(character: Character) {\n\n        this.showList = false;\n        this.showDetails = false;\n        this.personalForm.controls['name'].setValue(character.name === '' ? 'NA' : character.name);\n        this.personalForm.controls['aliases'].setValue(character.aliases);\n        this.personalForm.controls['gender'].setValue(character.gender === '' ? 'NA' : character.gender);\n        this.personalForm.controls['culture'].setValue(character.culture === '' ? 'NA' : character.culture);\n        this.personalForm.controls['born'].setValue(character.born === '' ? 'NA' : character.born);\n        this.personalForm.controls['died'].setValue(character.died === '' ? 'NA' : character.died);\n        this.personalForm.controls['father'].setValue(character.father === '' ? 'NA' : character.father);\n        this.personalForm.controls['mother'].setValue(character.mother === '' ? 'NA' : character.mother);\n        this.personalForm.controls['spouse'].setValue(character.spouse === '' ? 'NA' : character.spouse);\n       // this.books=character.books;\n        if (character.povBooks.length > 0) {\n            this.povbooks.push(character.povBooks);\n        }\n        if (character.allegiances.length > 0) {\n            this.allegiances.push(character.allegiances);\n        }\n\n        if (character.tvSeries.length > 0 ) {\n            this.tvSeries.push(character.tvSeries);\n        }\n\n        if (character.playedBy !== '') {\n            this.playedBy = character.playedBy;\n        } else {\n            this.playedBy = null;\n        }\n\n\n        if (character.titles !== '') {\n            this.titles = character.titles;\n        } else {\n            this.titles = null;\n        }\n        for (let i = 0; i < character.books.length; i++) {\n            // character.books[i].split('books/', 2)[1]\n            this.books.push({'name': character.books[i].split('books/', 2)[1], 'url': character.books[i]});\n        }\n\n\n\n        // this.router.navigate([]).then(result => {  window.open('/gameofthrone/character', '_blank'); });\n    }\n\n    public openModal(modalContent, character) {\n\n       // this.showList = false;\n        // this.showDetails = false;\n        this.personalForm.controls['name'].setValue(character.name === '' ? 'NA' : character.name);\n        this.personalForm.controls['aliases'].setValue(character.aliases);\n        this.personalForm.controls['gender'].setValue(character.gender === '' ? 'NA' : character.gender);\n        this.personalForm.controls['culture'].setValue(character.culture === '' ? 'NA' : character.culture);\n        this.personalForm.controls['born'].setValue(character.born === '' ? 'NA' : character.born);\n        this.personalForm.controls['died'].setValue(character.died === '' ? 'NA' : character.died);\n        this.personalForm.controls['father'].setValue(character.father === '' ? 'NA' : character.father);\n        this.personalForm.controls['mother'].setValue(character.mother === '' ? 'NA' : character.mother);\n        this.personalForm.controls['spouse'].setValue(character.spouse === '' ? 'NA' : character.spouse);\n        // this.books=character.books;\n        if (character.povBooks.length > 0) {\n            this.povbooks.push(character.povBooks);\n        }\n        if (character.allegiances.length > 0) {\n            this.allegiances.push(character.allegiances);\n        }\n\n        if (character.tvSeries.length > 0 ) {\n            this.tvSeries.push(character.tvSeries);\n        }\n\n        if (character.playedBy !== '') {\n            this.playedBy = character.playedBy;\n        } else {\n            this.playedBy = null;\n        }\n\n\n        if (character.titles !== '') {\n            this.titles = character.titles;\n        } else {\n            this.titles = null;\n        }\n        for (let i = 0; i < character.books.length; i++) {\n            // character.books[i].split('books/', 2)[1]\n            this.books.push({'name': character.books[i].split('books/', 2)[1], 'url': character.books[i]});\n        }\n\n        this.modalRef = this.modalService.open(modalContent, {container: '.app'});\n        this.modalRef.result.then((result) => {\n            this.personalForm.reset();\n        }, (reason) => {\n            this.personalForm.reset();\n        });\n    }\n\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {environment} from '../../../../environments/environment';\nimport {Character} from './character.model';\n@Injectable()\nexport class CharacterService {\n\n    constructor(public http: HttpClient) { }\n\n    getCharacters(): Observable<Character[]> {\n        return this.http.get<Character[]>(environment.BASE_URL + 'characters');\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiselectDropdownModule } from 'angular-2-dropdown-multiselect';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { PipesModule } from '../../theme/pipes/pipes.module';\nimport { CharacterComponent } from './character/character.component';\nimport {CustomFormsModule} from 'ng2-validation';\nimport {NgxChartsModule} from '@swimlane/ngx-charts';\nimport {CKEditorModule} from 'ng2-ckeditor';\nimport {DirectivesModule} from '../../theme/directives/directives.module';\nimport {BooksComponent} from './books/books.component';\nimport {HousesComponent} from './houses/houses.component';\n\nexport const routes = [\n    { path: '', redirectTo: 'controls', pathMatch: 'full'},\n    { path: 'character', component: CharacterComponent, data: { breadcrumb: 'Character' } },\n    {path: 'books', component: BooksComponent, data: { breadcrumb: 'Books' } },\n    {path: 'houses', component: HousesComponent, data: { breadcrumb: 'Houses' } }\n\n\n];\n\n@NgModule({\n  imports: [\n      CommonModule,\n      HttpClientModule,\n      FormsModule,\n      ReactiveFormsModule,\n      MultiselectDropdownModule,\n      NgbModule,\n      CustomFormsModule,\n      NgxChartsModule,\n      CKEditorModule,\n      DirectivesModule,\n      NgxPaginationModule,\n      PipesModule,\n      RouterModule.forChild(routes)\n  ],\n  declarations: [\n    CharacterComponent,\nBooksComponent,\n      HousesComponent\n  ]\n})\nexport class GameofthroneModule { }\n","export default \".step .step-content {\\n  background: #b9b9b9;\\n  height: 40px;\\n  font-size: 1.5rem;\\n}\\n.step .step-content .step-name {\\n  font-size: 14px;\\n}\\n.step .step-content.confirmed {\\n  background-color: #4BAE4F !important;\\n}\\n.confirmed-content .fa-check {\\n  font-size: 120px;\\n}\\n.confirmed-content .fa-print {\\n  font-size: 24px;\\n}\\n@media print {\\n  body * {\\n    visibility: hidden;\\n  }\\n\\n  #section-to-print, #section-to-print * {\\n    visibility: visible;\\n  }\\n\\n  #section-to-print {\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2hvdXNlcy9BOlxcaSZtX2NvZGVfdGVzdFxcY29kZV90ZXN0L3NyY1xcYXBwXFxwYWdlc1xcZ2FtZW9mdGhyb25lXFxob3VzZXNcXGhvdXNlcy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2hvdXNlcy9ob3VzZXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDSSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtBQ0FSO0FEQ1E7RUFDSSxlQUFBO0FDQ1o7QURDUTtFQUNJLG9DQUFBO0FDQ1o7QURLSTtFQUNJLGdCQUFBO0FDRlI7QURJSTtFQUNJLGVBQUE7QUNGUjtBREtBO0VBQ0k7SUFDSSxrQkFBQTtFQ0ZOOztFREtFO0lBQ0ksbUJBQUE7RUNGTjs7RURLRTtJQUNJLGtCQUFBO0lBQ0EsT0FBQTtJQUNBLE1BQUE7RUNGTjtBQUNGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvZ2FtZW9mdGhyb25lL2hvdXNlcy9ob3VzZXMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3RlcHtcbiAgICAuc3RlcC1jb250ZW50e1xuICAgICAgICBiYWNrZ3JvdW5kOiAjYjliOWI5O1xuICAgICAgICBoZWlnaHQ6IDQwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgICAgICAuc3RlcC1uYW1le1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICB9XG4gICAgICAgICYuY29uZmlybWVke1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRCQUU0RiAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uY29uZmlybWVkLWNvbnRlbnR7XG4gICAgLmZhLWNoZWNre1xuICAgICAgICBmb250LXNpemU6IDEyMHB4O1xuICAgIH1cbiAgICAuZmEtcHJpbnR7XG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICB9XG59XG5AbWVkaWEgcHJpbnQge1xuICAgIGJvZHkgKiB7XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgLy90cmFuc2Zvcm06IHNjYWxlKC43KTtcbiAgICB9XG4gICAgI3NlY3Rpb24tdG8tcHJpbnQsICNzZWN0aW9uLXRvLXByaW50ICoge1xuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuXG4gICAgfVxuICAgICNzZWN0aW9uLXRvLXByaW50IHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB0b3A6IDA7XG4gICAgfVxuICAgIC8vdGFibGUge3BhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDt9XG59XG5cbiIsIi5zdGVwIC5zdGVwLWNvbnRlbnQge1xuICBiYWNrZ3JvdW5kOiAjYjliOWI5O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xufVxuLnN0ZXAgLnN0ZXAtY29udGVudCAuc3RlcC1uYW1lIHtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLnN0ZXAgLnN0ZXAtY29udGVudC5jb25maXJtZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNEJBRTRGICFpbXBvcnRhbnQ7XG59XG5cbi5jb25maXJtZWQtY29udGVudCAuZmEtY2hlY2sge1xuICBmb250LXNpemU6IDEyMHB4O1xufVxuLmNvbmZpcm1lZC1jb250ZW50IC5mYS1wcmludCB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbn1cblxuQG1lZGlhIHByaW50IHtcbiAgYm9keSAqIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICAjc2VjdGlvbi10by1wcmludCwgI3NlY3Rpb24tdG8tcHJpbnQgKiB7XG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgfVxuXG4gICNzZWN0aW9uLXRvLXByaW50IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gIH1cbn0iXX0= */\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {NgbModal, NgbModalRef} from '@ng-bootstrap/ng-bootstrap';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {HousesService} from './houses.service';\nimport {Houses} from './houses.model';\nimport {Router} from '@angular/router';\n\n\n@Component({\n    selector: 'app-houses',\n    templateUrl: './houses.component.html',\n    styleUrls: ['./houses.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [HousesService]\n})\nexport class HousesComponent  implements OnInit {\n\n    public houses: Houses[];\n    public house: Houses;\n    public houseForm: FormGroup;\n    showDetails: Boolean = false; // hidden by default\n    showList: Boolean = true;\n    selected = [];\n    private seats = [];\n    private titles = [];\n    private cadetBranches = [];\n    private swornMembers = [];\n    public p: any;\n    public modalRef: NgbModalRef;\n    private ancestralWeapons: any = [];\n\n\n    constructor(private formBuilder: FormBuilder,  public modalService: NgbModal,\n                private housesService: HousesService,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n\n        this.getHouses();\n\n        this.houseForm = this.formBuilder.group({\n            'name': [''],\n            'isbn': [''],\n            'numberOfPages': [''],\n            'publisher': [''],\n            'country': [''],\n            'mediaType': null,\n            'released': null\n        });\n    }\n    public cancelHouses() {\n        this.showList = true;\n        this.houses = [];\n    }\n\n    public getHouses(): void {\n        this.housesService.getHouses().subscribe(houses =>\n            this.houses = houses\n        );\n    }\n\n    public editHouse(house: Houses) {\n\n        this.showList = false;\n        this.showDetails = true;\n        this.houseForm.controls['name'].setValue(house.name === '' ? 'NA' : house.name);\n        this.houseForm.controls['region'].setValue(house.region === '' ? 'NA' : house.region);\n        this.houseForm.controls['coatOfArms'].setValue(house.coatOfArms === '' ? 'NA' : house.coatOfArms);\n        this.houseForm.controls['words'].setValue(house.words === '' ? 'NA' : house.words);\n        this.houseForm.controls['currentLord'].setValue(house.currentLord === '' ? 'NA' : house.currentLord);\n        this.houseForm.controls['heir'].setValue(house.heir === '' ? 'NA' : house.heir);\n        this.houseForm.controls['overlord'].setValue(house.overlord === '' ? 'NA' : house.overlord);\n        this.houseForm.controls['founded'].setValue(house.founded === '' ? 'NA' : house.founded);\n        this.houseForm.controls['founder'].setValue(house.founder === '' ? 'NA' : house.founder);\n        this.houseForm.controls['diedOut'].setValue(house.diedOut === '' ? 'NA' : house.diedOut);\n\n        if (house.ancestralWeapons.length > 0 ) {\n            this.ancestralWeapons.push(house.ancestralWeapons);\n        }\n        if (house.titles.length > 0 ) {\n            this.titles.push(house.titles);\n        }\n        if (house.seats.length > 0 ) {\n            this.seats.push(house.seats);\n        }\n        for (const member of house.swornMembers) {\n            // character.books[i].split('books/', 2)[1]\n            this.swornMembers.push({'name': member.split('characters/', 2)[1], 'url': member});\n        }\n        for (const houseObj of house.cadetBranches) {\n            // character.books[i].split('books/', 2)[1]\n            this.cadetBranches.push({'name': houseObj.split('houses/', 2)[1], 'url': houseObj});\n        }\n\n\n        // this.router.navigate([]).then(result => {  window.open('/gameofthrone/character', '_blank'); });\n    }\n\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {environment} from '../../../../environments/environment';\nimport {Houses} from './houses.model';\n@Injectable()\nexport class HousesService {\n\n    constructor(public http: HttpClient) { }\n\n    getHouses(): Observable<Houses[]> {\n        return this.http.get<Houses[]>(environment.BASE_URL + 'houses/');\n    }\n}\n"],"sourceRoot":"webpack:///"}