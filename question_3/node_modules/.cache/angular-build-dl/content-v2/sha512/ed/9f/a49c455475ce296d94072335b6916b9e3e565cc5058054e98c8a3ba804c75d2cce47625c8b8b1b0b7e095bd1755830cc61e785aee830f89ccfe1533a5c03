{"version":3,"sources":["src/app/pages/servicetype/servicetype.component.html","src/app/pages/servicetype/servicetype.component.ts","src/app/pages/servicetype/servicetype.model.ts","src/app/pages/servicetype/servicetype.module.ts","src/app/pages/servicetype/servicetype.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"row mb-1\\\">\\n    <div class=\\\"col\\\">\\n        <div class=\\\"input-group mb-3 box-shadow\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text border-top-0 border-left-0 border-bottom-0\\\"><i class=\\\"fa fa-search\\\"></i></span>\\n            </div>\\n            <input type=\\\"text\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Search client by ID Number...\\\" class=\\\"form-control border-0\\\">\\n            <div class=\\\"input-group-append\\\">\\n                <span (click)=\\\"openModal(modalContent, null)\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i class=\\\"fa fa-user-plus\\\"></i></span>\\n                <span (click)=\\\"toggle('grid')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i class=\\\"fa fa-th\\\"></i></span>\\n                <span (click)=\\\"toggle('list')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i class=\\\"fa fa-list\\\"></i></span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div *ngIf=\\\"type=='list'\\\"  class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"table-responsive bg-white box-shadow\\\">\\n            <table class=\\\"table table-hover\\\">\\n                <thead>\\n                <tr>\\n                    <th></th>\\n                    <th>Service Type Code</th>\\n                    <th>Service Type Description</th>\\n                    <th>Date</th>\\n                    <th>Action</th>\\n                </tr>\\n                </thead>\\n                <tbody>\\n                <tr *ngFor=\\\"let servicetype of servicetypes \\\">\\n                    <td>{{servicetype.id}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{servicetype.servicetypeCode}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{servicetype.servicetypeName}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{servicetype.dateCreated | date:\\\"dd MMMM, yyyy\\\"}}</td>\\n                    <td class=\\\"align-middle\\\">\\n                        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n                            <button class=\\\"btn btn-secondary btn-sm\\\" (click)=\\\"openModal(modalContent, servicetype)\\\"><i class=\\\"fa fa-pencil\\\"></i></button>\\n                        </div>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"bg-white text-center\\\">\\n            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #modalContent>\\n    <div class=\\\"modal-body bg-gray\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-12 mb-0\\\">\\n                <div widget class=\\\"card border-0 box-shadow\\\">\\n                    <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                        <h5 class=\\\"mb-0\\\">{{servicetype.servicetypeName}}</h5>\\n                    </div>\\n                    <div class=\\\"card-body widget-body\\\">\\n                        <form [formGroup]=\\\"frmServicetype\\\" (ngSubmit)=\\\"onSubmit(frmServicetype.value)\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Service Type Code</label>\\n                                        <input formControlName=\\\"servicetypeCode\\\" class=\\\"form-control\\\" type=\\\"text\\\" required />\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Service Type Description</label>\\n                                        <input formControlName=\\\"servicetypeName\\\" class=\\\"form-control\\\" type=\\\"text\\\" required />\\n                                    </div>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"col-12 bg-white text-center py-1\\\">\\n                                <button [disabled]=\\\"!frmServicetype.valid\\\" class=\\\"btn btn-success mr-1\\\" type=\\\"submit\\\"><span *ngIf=\\\"!service.id\\\">Add</span><span *ngIf=\\\"service.id\\\">Update</span></button>\\n                                <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"closeModal()\\\">Cancel</button>\\n                            </div>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {Service} from '../services/service.model';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {NgbModal, NgbModalRef} from '@ng-bootstrap/ng-bootstrap';\nimport {ToastrService} from 'ngx-toastr';\nimport {Uom} from '../shared/models/uom.model';\n\nimport {Servicetype} from './servicetype.model';\nimport {ServicetypeService} from './servicetype.service';\n\n\n@Component({\n    selector: 'app-servicetype',\n    templateUrl: './servicetype.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [ServicetypeService]\n})\nexport class ServicetypeComponent implements OnInit {\n    public servicetypes: Servicetype[];\n    public servicetype: Servicetype;\n    //public countries: Country[];\n   // public counties: County[];\n    public uoms: Uom[];\n    public type = 'list';\n    public p: any;\n    public modalRef: NgbModalRef;\n\n    public frmServicetype: FormGroup;\n\n    constructor(public fb: FormBuilder,\n                public toastrService: ToastrService,\n                public servicetypeservice: ServicetypeService,\n                public modalService: NgbModal) {\n    }\n\n    ngOnInit() {\n        this.getServiceTypes();\n     //   this.getUoms();\n        this.frmServicetype = this.fb.group({\n            id: null,\n            servicetypeId: null,\n            servicetypeCode: [null, Validators.compose([Validators.required, Validators.maxLength(100)])],\n            servicetypeName: [null, Validators.compose([Validators.required, Validators.maxLength(50)])],\n            dateCreated: null\n        });\n\n    }\n\n    public getServiceTypes(): void {\n        this.servicetypeservice.getServicetypes().subscribe(servicetypes =>\n            this.servicetypes = servicetypes\n        );\n    }\n\n\n    public addServicetype(servicetype: Servicetype) {\n       // console.log(service);\n        this.servicetypeservice.addServicetype(servicetype).subscribe(servicetype => {\n            this.getServiceTypes();\n        });\n    }\n\n    public updateServicetype(servicetype: Servicetype) {\n        this.servicetypeservice.updateServicetype(servicetype).subscribe(servicetype => {\n            this.getServiceTypes();\n        });\n    }\n\n    public toggle(type) {\n        this.type = type;\n    }\n\n    public openModal(modalContent, servicetype) {\n        //console.log(service);\n        if (servicetype) {\n            this.servicetype = servicetype;\n            this.frmServicetype.setValue(servicetype);\n        } else {\n\n            this.servicetype = new Servicetype();\n        }\n        this.modalRef = this.modalService.open(modalContent, {container: '.app'});\n        this.modalRef.result.then((result) => {\n            this.frmServicetype.reset();\n        }, (reason) => {\n            this.frmServicetype.reset();\n        });\n    }\n\n    public closeModal() {\n        this.modalRef.close();\n    }\n\n    public onSubmit(servicetype: Servicetype): void {\n        console.log(servicetype);\n        if (this.frmServicetype.valid) {\n            if (servicetype.id) {\n                this.updateServicetype(servicetype);\n            } else {\n                this.addServicetype(servicetype);\n            }\n            this.modalRef.close();\n        }\n    }\n\n}\n","import {Service} from '../services/service.model';\nimport {Uom} from '../shared/models/uom.model';\nimport {Country} from '../shared/models/country.model';\nimport {County} from '../shared/models/county.model';\nimport {ServiceParam} from '../shared/models/serviceparam.model';\n\n\nexport class Servicetype {\n    id: number;\n    servicetypeId: string;\n    servicetypeCode: string;\n    servicetypeName: string;\n    status: String;\n dateCreated: String;\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n// import { InMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiselectDropdownModule } from 'angular-2-dropdown-multiselect';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { PipesModule } from '../../theme/pipes/pipes.module';\nimport { ServicetypeComponent } from './servicetype.component';\n\n\nexport const routes = [\n    { path: '', component: ServicetypeComponent, pathMatch: 'full' }\n];\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        // InMemoryWebApiModule.forRoot(CustomerData, { delay: 0 }),\n        RouterModule.forChild(routes),\n        FormsModule,\n        ReactiveFormsModule,\n        NgbModule,\n        MultiselectDropdownModule,\n        NgxPaginationModule,\n        PipesModule\n    ],\n    declarations: [\n        ServicetypeComponent\n    ]\n})\nexport class ServicetypeModule { }\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\n\nimport {catchError} from 'rxjs/operators';\n\n\nimport {environment} from '../../../environments/environment';\nimport {Servicetype} from './servicetype.model';\n\n\n\n@Injectable()\nexport class ServicetypeService {\n    constructor(public http: HttpClient) {\n    }\n\n    getServicetypes(): Observable<Servicetype[]> {\n        return this.http.get<Servicetype[]>(environment.BASE_URL + 'common/service_types');\n    }\n\n    addServicetype(servicetype: Servicetype) {\n        return this.http.post(environment.BASE_URL + 'common/service_type/save', servicetype).pipe(\n            catchError(this.handleError)\n        );\n    }\n\n    updateServicetype(servicetype: Servicetype) {\n        return this.http.post(environment.BASE_URL + 'common/service_type/save', servicetype);\n    }\n\n    private handleError(error: HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n            // A client-side or network error occurred. Handle it accordingly.\n            console.error('An error occurred:', error.error.message);\n        } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            console.error(\n                `Backend returned code ${error.status}, ` +\n                `body was: ${error.error}`);\n        }\n        // return an observable with a user-facing error message\n        return throwError(\n            'Something bad happened; please try again later.');\n    }\n}"],"sourceRoot":"webpack:///","file":"pages-servicetype-servicetype-module-es5.js"}