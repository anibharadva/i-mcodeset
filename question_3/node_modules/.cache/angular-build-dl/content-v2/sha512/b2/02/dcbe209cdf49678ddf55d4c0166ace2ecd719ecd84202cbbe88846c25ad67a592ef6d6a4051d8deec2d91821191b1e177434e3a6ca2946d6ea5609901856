{"version":3,"sources":["node_modules/@angular/common/fesm2015/http.js","node_modules/ngx-pagination/dist/ngx-pagination.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the value or values.\n     * @param {?} value The new value or array of values.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (/** @type {?} */ (first));\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.decorators = [\n    { type: NgModule, args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n//# sourceMappingURL=http.js.map\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = /** @class */ (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        }\r\n        else {\r\n            var changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = /** @class */ (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe = __decorate$1([\r\n        Pipe({\r\n            name: 'paginate',\r\n            pure: false\r\n        }),\r\n        __metadata(\"design:paramtypes\", [PaginationService])\r\n    ], PaginatePipe);\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = /** @class */ (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\r\n        get: function () {\r\n            return this._responsive;\r\n        },\r\n        set: function (value) {\r\n            this._responsive = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"id\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Number)\r\n    ], PaginationControlsComponent.prototype, \"maxSize\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"directionLinks\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"autoHide\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"responsive\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"previousLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"nextLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPaginationLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPageLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderCurrentLabel\", void 0);\r\n    __decorate$2([\r\n        Output(),\r\n        __metadata$1(\"design:type\", EventEmitter)\r\n    ], PaginationControlsComponent.prototype, \"pageChange\", void 0);\r\n    PaginationControlsComponent = __decorate$2([\r\n        Component({\r\n            selector: 'pagination-controls',\r\n            template: DEFAULT_TEMPLATE,\r\n            styles: [DEFAULT_STYLES],\r\n            changeDetection: ChangeDetectionStrategy.OnPush,\r\n            encapsulation: ViewEncapsulation.None\r\n        })\r\n    ], PaginationControlsComponent);\r\n    return PaginationControlsComponent;\r\n}());\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = /** @class */ (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.getTotalItems = function () {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.setCurrent(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", String)\r\n    ], PaginationControlsDirective.prototype, \"id\", void 0);\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", Number)\r\n    ], PaginationControlsDirective.prototype, \"maxSize\", void 0);\r\n    __decorate$3([\r\n        Output(),\r\n        __metadata$2(\"design:type\", EventEmitter)\r\n    ], PaginationControlsDirective.prototype, \"pageChange\", void 0);\r\n    PaginationControlsDirective = __decorate$3([\r\n        Directive({\r\n            selector: 'pagination-template,[pagination-template]',\r\n            exportAs: 'paginationApi'\r\n        }),\r\n        __metadata$2(\"design:paramtypes\", [PaginationService,\r\n            ChangeDetectorRef])\r\n    ], PaginationControlsDirective);\r\n    return PaginationControlsDirective;\r\n}());\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar NgxPaginationModule = /** @class */ (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule = __decorate([\r\n        NgModule({\r\n            imports: [CommonModule],\r\n            declarations: [\r\n                PaginatePipe,\r\n                PaginationControlsComponent,\r\n                PaginationControlsDirective\r\n            ],\r\n            providers: [PaginationService],\r\n            exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n        })\r\n    ], NgxPaginationModule);\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n"],"sourceRoot":"webpack:///","file":"default~pages-customer-customer-module~pages-gameofthrone-gameofthrone-module~pages-inventory-invent~aa30e03f-es5.js"}