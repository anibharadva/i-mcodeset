function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~pages-gameofthrone-gameofthrone-module~pages-invoice-invoice-module~pages-mortuary-mortuary-module"], {
  /***/
  "./node_modules/ng2-ckeditor/fesm2015/ng2-ckeditor.js":
  /*!************************************************************!*\
    !*** ./node_modules/ng2-ckeditor/fesm2015/ng2-ckeditor.js ***!
    \************************************************************/

  /*! exports provided: CKEditorModule, ɵa, ɵb, ɵc */

  /***/
  function node_modulesNg2CkeditorFesm2015Ng2CkeditorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CKEditorModule", function () {
      return CKEditorModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵa", function () {
      return CKEditorComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵb", function () {
      return CKButtonDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵc", function () {
      return CKGroupDirective;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/forms */
    "./node_modules/@angular/forms/fesm2015/forms.js");
    /**
     * CKGroup component
     * Usage :
     *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500">
     *      <ckbutton [name]="'SaveButton'" [command]="'saveCommand'" (click)="save($event)"
     *                [icon]="'/save.png'" [toolbar]="'customGroup,1'" [label]="'Save'">
     *      </ckbutton>
     *   </ckeditor>
     */


    var CKButtonDirective = /*#__PURE__*/function () {
      /**
       * CKGroup component
       * Usage :
       *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500">
       *      <ckbutton [name]="'SaveButton'" [command]="'saveCommand'" (click)="save($event)"
       *                [icon]="'/save.png'" [toolbar]="'customGroup,1'" [label]="'Save'">
       *      </ckbutton>
       *   </ckeditor>
       */
      function CKButtonDirective() {
        _classCallCheck(this, CKButtonDirective);

        this.click = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
      }

      _createClass(CKButtonDirective, [{
        key: "initialize",
        value: function initialize(editor) {
          var _this = this;

          editor.instance.addCommand(this.command, {
            exec: function exec(evt) {
              _this.click.emit(evt);
            }
          });
          editor.instance.ui.addButton(this.name, {
            label: this.label,
            command: this.command,
            toolbar: this.toolbar,
            icon: this.icon
          });
        }
      }, {
        key: "ngOnInit",
        value: function ngOnInit() {
          if (!this.name) throw new Error('Attribute "name" is required on <ckbutton>');
          if (!this.command) throw new Error('Attribute "command" is required on <ckbutton>');
        }
      }]);

      return CKButtonDirective;
    }();

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKButtonDirective.prototype, "click", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKButtonDirective.prototype, "label", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKButtonDirective.prototype, "command", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKButtonDirective.prototype, "toolbar", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKButtonDirective.prototype, "name", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKButtonDirective.prototype, "icon", void 0);
    CKButtonDirective = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'ckbutton'
    })], CKButtonDirective);
    /**
     * CKGroup component
     * Usage :
     *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500">
     *      <ckgroup [name]="'exampleGroup2'" [previous]="'1'" [subgroupOf]="'exampleGroup1'">
     *          .
     *          .
     *      </ckgroup>
     *   </ckeditor>
     */

    var CKGroupDirective = /*#__PURE__*/function () {
      function CKGroupDirective() {
        _classCallCheck(this, CKGroupDirective);
      }

      _createClass(CKGroupDirective, [{
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
          var _this2 = this;

          // Reconfigure each button's toolbar property within ckgroup to hold its parent's name
          this.toolbarButtons.forEach(function (button) {
            return button.toolbar = _this2.name;
          });
        }
      }, {
        key: "initialize",
        value: function initialize(editor) {
          editor.instance.ui.addToolbarGroup(this.name, this.previous, this.subgroupOf); // Initialize each button within ckgroup

          this.toolbarButtons.forEach(function (button) {
            button.initialize(editor);
          });
        }
      }]);

      return CKGroupDirective;
    }();

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKGroupDirective.prototype, "name", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKGroupDirective.prototype, "previous", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKGroupDirective.prototype, "subgroupOf", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(CKButtonDirective), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"])], CKGroupDirective.prototype, "toolbarButtons", void 0);
    CKGroupDirective = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'ckgroup'
    })], CKGroupDirective);
    var CKEditorComponent_1;
    /**
     * CKEditor component
     * Usage :
     *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500"></ckeditor>
     */

    var CKEditorComponent = CKEditorComponent_1 = /*#__PURE__*/function () {
      /**
       * Constructor
       */
      function CKEditorComponent(zone) {
        _classCallCheck(this, CKEditorComponent);

        this.zone = zone;
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.editorChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.ready = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.contentDom = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.fileUploadRequest = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.fileUploadResponse = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.paste = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.drop = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._value = '';
      }

      _createClass(CKEditorComponent, [{
        key: "ngOnChanges",
        value: function ngOnChanges(changes) {
          if (changes.readonly && this.instance) {
            this.instance.setReadOnly(changes.readonly.currentValue);
          }
        }
        /**
         * On component destroy
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          var _this3 = this;

          if (this.instance) {
            setTimeout(function () {
              if (_this3.instance) {
                _this3.instance.removeAllListeners();

                CKEDITOR.instances[_this3.instance.name].destroy();

                _this3.instance.destroy();

                _this3.instance = null;
              }
            });
          }
        }
        /**
         * On component view init
         */

      }, {
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
          this.ckeditorInit(this.config || {});
        }
        /**
         * On component view checked
         */

      }, {
        key: "ngAfterViewChecked",
        value: function ngAfterViewChecked() {
          this.ckeditorInit(this.config || {});
        }
        /**
         * Value update process
         */

      }, {
        key: "updateValue",
        value: function updateValue(value) {
          var _this4 = this;

          this.zone.run(function () {
            _this4.value = value;

            _this4.onChange(value);

            _this4.onTouched();

            _this4.change.emit(value);
          });
        }
        /**
         * CKEditor init
         */

      }, {
        key: "ckeditorInit",
        value: function ckeditorInit(config) {
          var _this5 = this;

          if (typeof CKEDITOR === 'undefined') {
            console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');
          } else {
            // Check textarea exists
            if (this.instance || !this.documentContains(this.host.nativeElement)) {
              return;
            }

            if (this.readonly) {
              config.readOnly = this.readonly;
            } // CKEditor replace textarea


            this.instance = CKEDITOR.replace(this.host.nativeElement, config); // Set initial value

            this.instance.setData(this.value); // listen for instanceReady event

            this.instance.on('instanceReady', function (evt) {
              // if value has changed while instance loading
              // update instance with current component value
              if (_this5.instance.getData() !== _this5.value) {
                _this5.instance.setData(_this5.value);
              } // send the evt to the EventEmitter


              _this5.ready.emit(evt);
            }); // CKEditor change event

            this.instance.on('change', function (evt) {
              _this5.onTouched();

              var value = _this5.instance.getData();

              if (_this5.value !== value) {
                // Debounce update
                if (_this5.debounce) {
                  if (_this5.debounceTimeout) clearTimeout(_this5.debounceTimeout);
                  _this5.debounceTimeout = setTimeout(function () {
                    _this5.updateValue(value);

                    _this5.debounceTimeout = null;
                  }, parseInt(_this5.debounce)); // Live update
                } else {
                  _this5.updateValue(value);
                }
              } // Original ckeditor event dispatch


              _this5.editorChange.emit(evt);
            }); // CKEditor blur event

            this.instance.on('blur', function (evt) {
              _this5.blur.emit(evt);
            }); // CKEditor focus event

            this.instance.on('focus', function (evt) {
              _this5.focus.emit(evt);
            }); // CKEditor contentDom event

            this.instance.on('contentDom', function (evt) {
              _this5.contentDom.emit(evt);
            }); // CKEditor fileUploadRequest event

            this.instance.on('fileUploadRequest', function (evt) {
              _this5.fileUploadRequest.emit(evt);
            }); // CKEditor fileUploadResponse event

            this.instance.on('fileUploadResponse', function (evt) {
              _this5.fileUploadResponse.emit(evt);
            }); // CKEditor paste event

            this.instance.on('paste', function (evt) {
              _this5.paste.emit(evt);
            }); // CKEditor drop event

            this.instance.on('drop', function (evt) {
              _this5.drop.emit(evt);
            }); // Add Toolbar Groups to Editor. This will also add Buttons within groups.

            this.toolbarGroups.forEach(function (group) {
              group.initialize(_this5);
            }); // Add Toolbar Buttons to Editor.

            this.toolbarButtons.forEach(function (button) {
              button.initialize(_this5);
            });
          }
        }
        /**
         * Implements ControlValueAccessor
         */

      }, {
        key: "writeValue",
        value: function writeValue(value) {
          this._value = value;
          if (this.instance) this.instance.setData(value);
        }
      }, {
        key: "onChange",
        value: function onChange(_) {}
      }, {
        key: "onTouched",
        value: function onTouched() {}
      }, {
        key: "registerOnChange",
        value: function registerOnChange(fn) {
          this.onChange = fn;
        }
      }, {
        key: "registerOnTouched",
        value: function registerOnTouched(fn) {
          this.onTouched = fn;
        }
      }, {
        key: "documentContains",
        value: function documentContains(node) {
          return document.contains ? document.contains(node) : document.body.contains(node);
        }
      }, {
        key: "value",
        get: function get() {
          return this._value;
        },
        set: function set(v) {
          if (v !== this._value) {
            this._value = v;
            this.onChange(v);
          }
        }
      }]);

      return CKEditorComponent;
    }();

    CKEditorComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
      }];
    };

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "config", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], CKEditorComponent.prototype, "readonly", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], CKEditorComponent.prototype, "debounce", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "change", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "editorChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "ready", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "blur", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "focus", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "contentDom", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "fileUploadRequest", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "fileUploadResponse", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "paste", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "drop", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('host', {
      "static": false
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], CKEditorComponent.prototype, "host", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(CKButtonDirective), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"])], CKEditorComponent.prototype, "toolbarButtons", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(CKGroupDirective), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"])], CKEditorComponent.prototype, "toolbarGroups", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [Object])], CKEditorComponent.prototype, "value", null);
    CKEditorComponent = CKEditorComponent_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
      selector: 'ckeditor',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
          return CKEditorComponent_1;
        }),
        multi: true
      }],
      template: "\n    <textarea #host></textarea>\n  "
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], CKEditorComponent);
    /**
     * CKEditorModule
     */

    var CKEditorModule = function CKEditorModule() {
      _classCallCheck(this, CKEditorModule);
    };

    CKEditorModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
      declarations: [CKEditorComponent, CKButtonDirective, CKGroupDirective],
      exports: [CKEditorComponent, CKButtonDirective, CKGroupDirective]
    })], CKEditorModule);
    /**
     * Generated bundle index. Do not edit.
     */
    //# sourceMappingURL=ng2-ckeditor.js.map

    /***/
  }
}]);
//# sourceMappingURL=default~pages-gameofthrone-gameofthrone-module~pages-invoice-invoice-module~pages-mortuary-mortuary-module-es5.js.map