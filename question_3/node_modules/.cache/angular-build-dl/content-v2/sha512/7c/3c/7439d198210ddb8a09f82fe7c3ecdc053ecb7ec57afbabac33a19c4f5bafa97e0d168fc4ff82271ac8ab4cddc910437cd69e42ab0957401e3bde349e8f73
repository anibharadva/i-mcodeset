{"version":3,"sources":["src/app/pages/services/services.component.html","src/app/pages/customer/customer.service.ts","src/app/pages/services/services.component.ts","src/app/pages/services/services.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,+tNAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUf,QAAa,eAAb;AACI,+BAAmB,IAAnB,EAAmC;AAAA;;AAAhB,aAAA,IAAA,GAAA,IAAA;AAAqB;;AAD5C;AAAA;AAAA,qCAGc;AACN,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAwB,sDAAA,CAAA,aAAA,CAAA,CAAY,QAAZ,GAAuB,gBAA/C,CAAP;AACH;AALL;AAAA;AAAA,kCAOc,MAPd,EAO4B;AACpB,iBAAO,KAAK,IAAL,CAAU,IAAV,CAAe,sDAAA,CAAA,aAAA,CAAA,CAAY,QAAZ,GAAuB,qBAAtC,EAA6D,MAA7D,CAAP;AACH;AATL;AAAA;AAAA,qCAWiB,MAXjB,EAW+B;AACvB,iBAAO,KAAK,IAAL,CAAU,IAAV,CAAe,sDAAA,CAAA,aAAA,CAAA,CAAY,QAAZ,GAAwB,qBAAvC,EAA8D,MAA9D,CAAP;AACH;AAbL;AAAA;AAAA,qCAeiB,EAfjB,EAe2B;AACnB,iBAAO,KAAK,IAAL,WAAiB,sDAAA,CAAA,aAAA,CAAA,CAAY,QAAZ,GAAuB,GAAvB,GAA6B,EAA9C,CAAP;AACH;AAjBL;AAAA;AAAA,uCAkBgB;AACR,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAyB,sDAAA,CAAA,aAAA,CAAA,CAAY,QAAZ,GAAuB,kBAAhD,CAAP;AACH;AApBL;AAAA;AAAA,sCAsBe;AACP,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAwB,sDAAA,CAAA,aAAA,CAAA,CAAY,QAAZ,GAAuB,iBAA/C,CAAP;AACH;AAxBL;AAAA;AAAA,sCA0Be;AACP,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAwB,sDAAA,CAAA,aAAA,CAAA,CAAY,QAAZ,GAAuB,sBAA/C,CAAP;AACH;AA5BL;;AAAA;AAAA,OAAA;;;;cAC6B,iDAAA,CAAA,YAAA;;;;AADhB,IAAA,eAAe,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAD3B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,EAC2B,E,uEACC,iDAAA,CAAA,YAAA,C,EADD,CAAA,EAAf,eAAe,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSb,QAAa,iBAAb;AAaI,iCAAmB,EAAnB,EACmB,aADnB,EAEmB,cAFnB,EAGmB,iBAHnB,EAImB,YAJnB,EAIyC;AAAA;;AAJtB,aAAA,EAAA,GAAA,EAAA;AACA,aAAA,aAAA,GAAA,aAAA;AACA,aAAA,cAAA,GAAA,cAAA;AACA,aAAA,iBAAA,GAAA,iBAAA;AACA,aAAA,YAAA,GAAA,YAAA;AAXZ,aAAA,IAAA,GAAO,MAAP;AAYN;;AAlBL;AAAA;AAAA,mCAoBY;AACJ,eAAK,eAAL;AACA,eAAK,OAAL;AACA,eAAK,WAAL;AACA,eAAK,UAAL,GAAkB,KAAK,EAAL,CAAQ,KAAR,CAAc;AAC5B,YAAA,EAAE,EAAE,IADwB;AAE5B,YAAA,SAAS,EAAE,IAFiB;AAG5B,YAAA,WAAW,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,GAArB,CAAtB,CAAnB,CAAP,CAHe;AAI5B,YAAA,WAAW,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,EAArB,CAAtB,CAAnB,CAAP,CAJe;AAK5B,YAAA,KAAK,EAAE,IALqB;AAM5B,YAAA,IAAI,EAAE,IANsB;AAO5B,YAAA,eAAe,EAAE,IAPW;AAQ5B,YAAA,WAAW,EAAE,CARe;AAS5B,YAAA,MAAM,EAAE,CAToB;AAU5B,YAAA,QAAQ,EAAE,CAVkB;AAW5B,YAAA,WAAW,EAAE;AAXe,WAAd,CAAlB;AAeH;AAvCL;AAAA;AAAA,sCAyCsB;AAAA;;AACd,eAAK,cAAL,CAAoB,WAApB,GAAkC,SAAlC,CAA4C,UAAA,QAAQ;AAAA,mBAChD,KAAI,CAAC,QAAL,GAAgB,QADgC;AAAA,WAApD;AAGH;AA7CL;AAAA;AAAA,uCA+CuB;AAAA;;AACf,eAAK,iBAAL,CAAuB,YAAvB,GAAsC,SAAtC,CAAgD,UAAA,SAAS;AAAA,mBACrD,MAAI,CAAC,SAAL,GAAiB,SADoC;AAAA,WAAzD;AAGH;AAnDL;AAAA;AAAA,sCAqDsB;AAAA;;AACd,eAAK,iBAAL,CAAuB,WAAvB,GAAqC,SAArC,CAA+C,UAAA,QAAQ;AAAA,mBACnD,MAAI,CAAC,QAAL,GAAgB,QADmC;AAAA,WAAvD;AAGH;AAzDL;AAAA;AAAA,0CA2D0B;AAAA;;AAClB,eAAK,cAAL,CAAoB,eAApB,GAAsC,SAAtC,CAAgD,UAAA,YAAY;AAAA,mBACxD,MAAI,CAAC,YAAL,GAAoB,YADoC;AAAA,WAA5D;AAGH;AA/DL;AAAA;AAAA,kCAiEkB;AAAA;;AACV,eAAK,cAAL,CAAoB,OAApB,GAA8B,SAA9B,CAAwC,UAAA,IAAI;AAAA,mBACxC,MAAI,CAAC,IAAL,GAAY,IAD4B;AAAA,WAA5C;AAGH;AArEL;AAAA;AAAA,mCAuEsB,OAvEtB,EAuEsC;AAAA;;AAC9B,UAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACA,eAAK,cAAL,CAAoB,UAApB,CAA+B,OAA/B,EAAwC,SAAxC,CAAkD,UAAA,OAAO,EAAG;AACxD,YAAA,MAAI,CAAC,WAAL;AACH,WAFD;AAGH;AA5EL;AAAA;AAAA,sCA8EyB,OA9EzB,EA8EyC;AAAA;;AACjC,eAAK,cAAL,CAAoB,aAApB,CAAkC,OAAlC,EAA2C,SAA3C,CAAqD,UAAA,OAAO,EAAG;AAC3D,YAAA,MAAI,CAAC,WAAL;AACH,WAFD;AAGH;AAlFL;AAAA;AAAA,+BAoFkB,IApFlB,EAoFsB;AACd,eAAK,IAAL,GAAY,IAAZ;AACH;AAtFL;AAAA;AAAA,kCAwFqB,YAxFrB,EAwFmC,OAxFnC,EAwF0C;AAAA;;AAClC,UAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;;AACA,cAAI,OAAJ,EAAa;AACT,iBAAK,OAAL,GAAe,OAAf;AACA,iBAAK,UAAL,CAAgB,QAAhB,CAAyB,OAAzB;AACH,WAHD,MAGO;AAEH,iBAAK,OAAL,GAAe,IAAI,oDAAA,CAAA,SAAA,CAAJ,EAAf;AACH;;AACD,eAAK,QAAL,GAAgB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,YAAvB,EAAqC;AAAC,YAAA,SAAS,EAAE;AAAZ,WAArC,CAAhB;AACA,eAAK,QAAL,CAAc,MAAd,CAAqB,IAArB,CAA0B,UAAC,MAAD,EAAW;AACjC,YAAA,MAAI,CAAC,UAAL,CAAgB,KAAhB;AACH,WAFD,EAEG,UAAC,MAAD,EAAW;AACV,YAAA,MAAI,CAAC,UAAL,CAAgB,KAAhB;AACH,WAJD;AAKH;AAvGL;AAAA;AAAA,qCAyGqB;AACb,eAAK,QAAL,CAAc,KAAd;AACH;AA3GL;AAAA;AAAA,iCA6GoB,OA7GpB,EA6GoC;AAC5B,UAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;;AACA,cAAI,KAAK,UAAL,CAAgB,KAApB,EAA2B;AACvB,gBAAI,OAAO,CAAC,EAAZ,EAAgB;AACZ,mBAAK,aAAL,CAAmB,OAAnB;AACH,aAFD,MAEO;AACH,mBAAK,UAAL,CAAgB,OAAhB;AACH;;AACD,iBAAK,QAAL,CAAc,KAAd;AACH;AACJ;AAvHL;;AAAA;AAAA,OAAA;;;;cAa2B,2CAAA,CAAA,aAAA;;cACW,uCAAA,CAAA,eAAA;;cACC,6CAAA,CAAA,eAAA;;cACG,uDAAA,CAAA,iBAAA;;cACL,uDAAA,CAAA,UAAA;;;;AAjBxB,IAAA,iBAAiB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAN7B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACP,MAAA,QAAQ,EAAE,cADH;AAEP,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,8FAAA,CAAA,YAFO;AAGP,MAAA,aAAa,EAAE,0CAAA,CAAA,mBAAA,CAAA,CAAkB,IAH1B;AAIP,MAAA,SAAS,EAAE,CAAC,6CAAA,CAAA,eAAA,CAAD,EAAgB,uDAAA,CAAA,iBAAA,CAAhB;AAJJ,KAAV,CAM6B,E,uEAaH,2CAAA,CAAA,aAAA,C,EACW,uCAAA,CAAA,eAAA,C,EACC,6CAAA,CAAA,eAAA,C,EACG,uDAAA,CAAA,iBAAA,C,EACL,uDAAA,CAAA,UAAA,C,EAjBP,CAAA,EAAjB,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDChBb;;;AAUO,QAAM,MAAM,GAAG,CAClB;AAAE,MAAA,IAAI,EAAE,EAAR;AAAY,MAAA,SAAS,EAAE,iDAAA,CAAA,mBAAA,CAAvB;AAA0C,MAAA,SAAS,EAAE;AAArD,KADkB,CAAf;;AAoBP,QAAa,cAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,cAAc,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAjB1B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACN,MAAA,OAAO,EAAE,CACL,4CAAA,CAAA,cAAA,CADK,EAEL,iDAAA,CAAA,kBAAA,CAFK,EAGL;AACA,MAAA,4CAAA,CAAA,cAAA,CAAA,CAAa,QAAb,CAAsB,MAAtB,CAJK,EAKL,2CAAA,CAAA,aAAA,CALK,EAML,2CAAA,CAAA,qBAAA,CANK,EAOL,uDAAA,CAAA,WAAA,CAPK,EAQL,2DAAA,CAAA,2BAAA,CARK,EASL,2CAAA,CAAA,qBAAA,CATK,EAUL,sDAAA,CAAA,aAAA,CAVK,CADH;AAaN,MAAA,YAAY,EAAE,CACV,iDAAA,CAAA,mBAAA,CADU;AAbR,KAAT,CAiB0B,CAAA,EAAd,cAAc,CAAd","sourcesContent":["export default \"<div class=\\\"row mb-1\\\">\\n    <div class=\\\"col\\\">\\n        <div class=\\\"input-group mb-3 box-shadow\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text border-top-0 border-left-0 border-bottom-0\\\"><i class=\\\"fa fa-search\\\"></i></span>\\n            </div>\\n            <input type=\\\"text\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Search client by ID Number...\\\" class=\\\"form-control border-0\\\">\\n            <div class=\\\"input-group-append\\\">\\n                <span (click)=\\\"openModal(modalContent, null)\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i class=\\\"fa fa-user-plus\\\"></i></span>\\n                <span (click)=\\\"toggle('grid')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i class=\\\"fa fa-th\\\"></i></span>\\n                <span (click)=\\\"toggle('list')\\\" class=\\\"input-group-text border-top-0 border-right-0 border-bottom-0\\\"><i class=\\\"fa fa-list\\\"></i></span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div *ngIf=\\\"type=='list'\\\"  class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"table-responsive bg-white box-shadow\\\">\\n            <table class=\\\"table table-hover\\\">\\n                <thead>\\n                <tr>\\n                    <th></th>\\n                    <th>Service Code</th>\\n                    <th>Service Description</th>\\n                    <th>Unit</th>\\n                    <th>Price</th>\\n                    <th>Service Type</th>\\n                    <th>Date</th>\\n                    <th>Action</th>\\n                </tr>\\n                </thead>\\n                <tbody>\\n                <tr *ngFor=\\\"let service of services \\\">\\n                    <td>{{service.id}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{service.serviceCode}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{service.serviceName}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{service.unit}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{service.price}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{service.serviceTypeName}}</td>\\n                    <td class=\\\"align-middle text-truncate\\\">{{service.dateCreated | date:\\\"dd MMMM, yyyy\\\"}}</td>\\n                    <td class=\\\"align-middle\\\">\\n                        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n                            <button class=\\\"btn btn-secondary btn-sm\\\" (click)=\\\"openModal(modalContent, service)\\\"><i class=\\\"fa fa-pencil\\\"></i></button>\\n                        </div>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"bg-white text-center\\\">\\n            <pagination-controls autoHide=\\\"true\\\" (pageChange)=\\\"p = $event\\\" maxSize=\\\"3\\\"></pagination-controls>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #modalContent>\\n    <div class=\\\"modal-body bg-gray\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-12 mb-0\\\">\\n                <div widget class=\\\"card border-0 box-shadow\\\">\\n                    <div class=\\\"card-header transparent border-0 text-muted\\\">\\n                        <h5 class=\\\"mb-0\\\">{{service.serviceName}}</h5>\\n                    </div>\\n                    <div class=\\\"card-body widget-body\\\">\\n                        <form [formGroup]=\\\"frmService\\\" (ngSubmit)=\\\"onSubmit(frmService.value)\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Service Code</label>\\n                                        <input formControlName=\\\"serviceCode\\\" class=\\\"form-control\\\" type=\\\"text\\\" required />\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Service Description</label>\\n                                        <input formControlName=\\\"serviceName\\\" class=\\\"form-control\\\" type=\\\"text\\\" required />\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"form-control-label\\\">Service Type</label>\\n                                        <select formControlName=\\\"serviceType\\\" class=\\\"form-control\\\" required>\\n                                            <option *ngFor=\\\"let serviceType of serviceTypes\\\" [selected]=\\\"serviceType.id==service.serviceType\\\" [value]=\\\"serviceType.id\\\">{{serviceType.name}}</option>\\n                                        </select>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Unit</label>\\n                                        <select formControlName=\\\"unit\\\" class=\\\"form-control\\\" required>\\n                                            <option *ngFor=\\\"let uom of uoms\\\" [selected]=\\\"uom.id ===service.unitId\\\" [value]=\\\"uom.id\\\">{{uom.name}}</option>\\n                                        </select>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\\"col-sm-12\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray\\\">Price</label>\\n                                        <input formControlName=\\\"price\\\" class=\\\"form-control\\\" type=\\\"number\\\" required />\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-12 bg-white text-center py-1\\\">\\n                                <button [disabled]=\\\"!frmService.valid\\\" class=\\\"btn btn-success mr-1\\\" type=\\\"submit\\\"><span *ngIf=\\\"!service.id\\\">Add</span><span *ngIf=\\\"service.id\\\">Update</span></button>\\n                                <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"closeModal()\\\">Cancel</button>\\n                            </div>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\"","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {Client, User} from './customer.model';\nimport {Country} from '../shared/models/country.model';\nimport {County} from '../shared/models/county.model';\nimport {environment} from '../../../environments/environment';\nimport {Branch} from '../shared/models/branch.model';\n\n@Injectable()\nexport class CustomerService {\n    constructor(public http: HttpClient) { }\n\n    getClients(): Observable<Client[]> {\n        return this.http.get<Client[]>(environment.BASE_URL + 'client/clients');\n    }\n\n    addClient(client: Client) {\n        return this.http.post(environment.BASE_URL + 'client/registration', client);\n    }\n\n    updateClient(client: Client) {\n        return this.http.post(environment.BASE_URL  + 'client/registration', client);\n    }\n\n    deleteClient(id: number) {\n        return this.http.delete(environment.BASE_URL + '/' + id);\n    }\n    getCountries(): Observable<Country[]> {\n        return this.http.get<Country[]>(environment.BASE_URL + 'common/countries');\n    }\n\n    getCounties(): Observable<County[]> {\n        return this.http.get<County[]>(environment.BASE_URL + 'common/counties');\n    }\n\n    getBranches(): Observable<Branch[]> {\n        return this.http.get<Branch[]>(environment.BASE_URL + 'common/branches/list');\n    }\n}\n","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {Service} from '../services/service.model';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {NgbModal, NgbModalRef} from '@ng-bootstrap/ng-bootstrap';\nimport {MileleService} from './service.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {Uom} from '../shared/models/uom.model';\nimport {CustomerService} from '../customer/customer.service';\nimport {Country} from '../shared/models/country.model';\nimport {County} from '../shared/models/county.model';\nimport {Servicetype} from '../servicetype/servicetype.model';\n\n\n@Component({\n    selector: 'app-services',\n    templateUrl: './services.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [MileleService, CustomerService]\n})\nexport class ServicesComponent implements OnInit {\n    public services: Service[];\n    public service: Service;\n    public countries: Country[];\n    public counties: County[];\n    public uoms: Uom[];\n    public type = 'list';\n    public p: any;\n    public modalRef: NgbModalRef;\n    public servicetypes: Servicetype[];\n\n    public frmService: FormGroup;\n\n    constructor(public fb: FormBuilder,\n                public toastrService: ToastrService,\n                public mileleServices: MileleService,\n                public membershipService: CustomerService,\n                public modalService: NgbModal) {\n    }\n\n    ngOnInit() {\n        this.getServiceTypes();\n        this.getUoms();\n        this.getServices();\n        this.frmService = this.fb.group({\n            id: null,\n            serviceId: null,\n            serviceCode: [null, Validators.compose([Validators.required, Validators.maxLength(100)])],\n            serviceName: [null, Validators.compose([Validators.required, Validators.maxLength(50)])],\n            price: null,\n            unit: null,\n            serviceTypeName: null,\n            serviceType: 0,\n            unitId: 0,\n            quantity: 0,\n            totalAmount: 0\n\n        });\n\n    }\n\n    public getServices(): void {\n        this.mileleServices.getServices().subscribe(services =>\n            this.services = services\n        );\n    }\n\n    public getCountries(): void {\n        this.membershipService.getCountries().subscribe(countries =>\n            this.countries = countries\n        );\n    }\n\n    public getCounties(): void {\n        this.membershipService.getCounties().subscribe(counties =>\n            this.counties = counties\n        );\n    }\n\n    public getServiceTypes(): void {\n        this.mileleServices.getServiceTypes().subscribe(servicetypes =>\n            this.servicetypes = servicetypes\n        );\n    }\n\n    public getUoms(): void {\n        this.mileleServices.getUoms().subscribe(uoms =>\n            this.uoms = uoms\n        );\n    }\n\n    public addService(service: Service) {\n        console.log(service);\n        this.mileleServices.addService(service).subscribe(service => {\n            this.getServices();\n        });\n    }\n\n    public updateService(service: Service) {\n        this.mileleServices.updateService(service).subscribe(service => {\n            this.getServices();\n        });\n    }\n\n    public toggle(type) {\n        this.type = type;\n    }\n\n    public openModal(modalContent, service) {\n        console.log(service);\n        if (service) {\n            this.service = service;\n            this.frmService.setValue(service);\n        } else {\n\n            this.service = new Service();\n        }\n        this.modalRef = this.modalService.open(modalContent, {container: '.app'});\n        this.modalRef.result.then((result) => {\n            this.frmService.reset();\n        }, (reason) => {\n            this.frmService.reset();\n        });\n    }\n\n    public closeModal() {\n        this.modalRef.close();\n    }\n\n    public onSubmit(service: Service): void {\n        console.log(service);\n        if (this.frmService.valid) {\n            if (service.id) {\n                this.updateService(service);\n            } else {\n                this.addService(service);\n            }\n            this.modalRef.close();\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n// import { InMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiselectDropdownModule } from 'angular-2-dropdown-multiselect';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { PipesModule } from '../../theme/pipes/pipes.module';\nimport { ServicesComponent } from './services.component';\n\n\nexport const routes = [\n    { path: '', component: ServicesComponent, pathMatch: 'full' }\n];\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        // InMemoryWebApiModule.forRoot(CustomerData, { delay: 0 }),\n        RouterModule.forChild(routes),\n        FormsModule,\n        ReactiveFormsModule,\n        NgbModule,\n        MultiselectDropdownModule,\n        NgxPaginationModule,\n        PipesModule\n    ],\n    declarations: [\n        ServicesComponent\n    ]\n})\nexport class ServicesModule { }\n"],"sourceRoot":"webpack:///","file":"pages-services-services-module-es5.js"}